<ResourceDictionary xmlns="http://schemas.microsoft.com/winfx/2006/xaml/presentation"
                    xmlns:x="http://schemas.microsoft.com/winfx/2006/xaml"
                    xmlns:control="clr-namespace:Ay.Framework.WPF.Controls" 
                   
                  
                  >

    <ResourceDictionary.MergedDictionaries>
        <ResourceDictionary Source="MainColors.xaml"/>
    </ResourceDictionary.MergedDictionaries>


    <control:Number2ThicknessConverter x:Key="Number2ThicknessConverter1" />
    <control:IndentConverter Indent="12" MarginLeft="5" x:Key="IndentConverter" />



    <Style x:Key="RepeatButtonTransparent" TargetType="{x:Type RepeatButton}">
        <Setter Property="OverridesDefaultStyle" Value="true"/>
        <Setter Property="Background" Value="Transparent"/>
        <Setter Property="Focusable" Value="false"/>
        <Setter Property="IsTabStop" Value="false"/>
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type RepeatButton}">
                    <Rectangle Fill="{TemplateBinding Background}" Height="{TemplateBinding Height}" Width="{TemplateBinding Width}"/>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>


    <Style x:Key="ScrollBarThumbVertical" TargetType="{x:Type Thumb}">
        <Setter Property="OverridesDefaultStyle" Value="true"/>
        <Setter Property="IsTabStop" Value="false"/>
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type Thumb}">
                    <Border x:Name="aythumbborder">
                        <!--<VisualStateManager.VisualStateGroups> <VisualStateGroup x:Name="CommonStates"> <VisualStateGroup.Transitions> <VisualTransition GeneratedDuration="0:0:0.3"/> </VisualStateGroup.Transitions> <VisualState x:Name="Normal"/> <VisualState x:Name="MouseOver"> <Storyboard> <DoubleAnimationUsingKeyFrames Storyboard.TargetProperty="(UIElement.Opacity)" Storyboard.TargetName="rectangle"> <EasingDoubleKeyFrame KeyTime="0" Value="0.5"/> </DoubleAnimationUsingKeyFrames> </Storyboard> </VisualState> <VisualState x:Name="Pressed"> <Storyboard> <DoubleAnimationUsingKeyFrames Storyboard.TargetProperty="(UIElement.Opacity)" Storyboard.TargetName="rectangle"> <EasingDoubleKeyFrame KeyTime="0" Value="0.95"/> </DoubleAnimationUsingKeyFrames> </Storyboard> </VisualState> <VisualState x:Name="Disabled">  </VisualState> </VisualStateGroup> </VisualStateManager.VisualStateGroups>-->
                        <Rectangle x:Name="rectangle" Fill="{StaticResource ScrollBar.Static.Thumb}" Height="{TemplateBinding Height}" SnapsToDevicePixels="True" Opacity="1"  RadiusX="{DynamicResource ScrollBarRadius}" RadiusY="{DynamicResource ScrollBarRadius}"/>
                    </Border>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>
    <Style x:Key="ScrollBarThumbHorizontal" TargetType="{x:Type Thumb}">
        <Setter Property="OverridesDefaultStyle" Value="true"/>
        <Setter Property="IsTabStop" Value="false"/>
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type Thumb}">
                    <Border x:Name="ayhorthumbborder">
                        <!--<VisualStateManager.VisualStateGroups> <VisualStateGroup x:Name="CommonStates"> <VisualStateGroup.Transitions> <VisualTransition GeneratedDuration="0:0:0.3"/> </VisualStateGroup.Transitions> <VisualState x:Name="Normal"/> <VisualState x:Name="MouseOver"> <Storyboard> <DoubleAnimationUsingKeyFrames Storyboard.TargetProperty="(UIElement.Opacity)" Storyboard.TargetName="rectangle"> <EasingDoubleKeyFrame KeyTime="0" Value="0.5"/> </DoubleAnimationUsingKeyFrames> </Storyboard> </VisualState> <VisualState x:Name="Pressed"> <Storyboard> <DoubleAnimationUsingKeyFrames Storyboard.TargetProperty="(UIElement.Opacity)" Storyboard.TargetName="rectangle"> <EasingDoubleKeyFrame KeyTime="0" Value="0.95"/> </DoubleAnimationUsingKeyFrames> </Storyboard> </VisualState>  </VisualStateGroup> </VisualStateManager.VisualStateGroups>-->
                        <Rectangle x:Name="rectangle" Fill="{StaticResource ScrollBar.Static.Thumb}" RadiusX="{DynamicResource ScrollBarRadius}" RadiusY="{DynamicResource ScrollBarRadius}" Height="{TemplateBinding Height}" SnapsToDevicePixels="True" Opacity="1"/>
                    </Border>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>
    


    <Style x:Key="AyScrollBarStyle" TargetType="{x:Type ScrollBar}">
        <Style.Resources>
            <Storyboard x:Key="AyScrollMouseOver">
                <DoubleAnimationUsingKeyFrames Storyboard.TargetProperty="(UIElement.Opacity)" Storyboard.TargetName="PART_Track">
                    <EasingDoubleKeyFrame KeyTime="0:0:0.3" Value="1" >
                        <EasingDoubleKeyFrame.EasingFunction>
                            <CircleEase EasingMode="EaseOut"/>
                        </EasingDoubleKeyFrame.EasingFunction>
                    </EasingDoubleKeyFrame>
                </DoubleAnimationUsingKeyFrames>
            </Storyboard>
            <Storyboard x:Key="AyScrollMouseOut">
                <DoubleAnimationUsingKeyFrames Storyboard.TargetProperty="(UIElement.Opacity)" Storyboard.TargetName="PART_Track">
                    <EasingDoubleKeyFrame KeyTime="0:0:0.5" Value="0">
                        <EasingDoubleKeyFrame.EasingFunction>
                            <CircleEase EasingMode="EaseIn"/>
                        </EasingDoubleKeyFrame.EasingFunction>
                    </EasingDoubleKeyFrame>
                </DoubleAnimationUsingKeyFrames>
            </Storyboard>
        </Style.Resources>
        <Setter Property="Stylus.IsPressAndHoldEnabled" Value="false"/>
        <Setter Property="Stylus.IsFlicksEnabled" Value="false"/>
        <Setter Property="BorderThickness" Value="0"/>
        <Setter Property="Width" Value="{DynamicResource ScrollViewerWH}"/>
        <Setter Property="MinWidth" Value="8.0"/>
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type ScrollBar}">
                    <Grid x:Name="Bg" SnapsToDevicePixels="true" Cursor="SizeAll">
                        <Track x:Name="PART_Track" IsDirectionReversed="true" IsEnabled="{TemplateBinding IsMouseOver}" Opacity="0">
                            <Track.DecreaseRepeatButton>
                                <RepeatButton Command="{x:Static ScrollBar.PageUpCommand}" Style="{StaticResource RepeatButtonTransparent}"/>
                            </Track.DecreaseRepeatButton>
                            <Track.IncreaseRepeatButton>
                                <RepeatButton Command="{x:Static ScrollBar.PageDownCommand}" Style="{StaticResource RepeatButtonTransparent}"/>
                            </Track.IncreaseRepeatButton>
                            <Track.Thumb>
                                <Thumb Style="{StaticResource ScrollBarThumbVertical}"/>
                            </Track.Thumb>
                        </Track>
                    </Grid>
                    <ControlTemplate.Triggers>
                        <Trigger Property="IsMouseOver" Value="true">
                            <Trigger.ExitActions>
                                <BeginStoryboard Storyboard="{StaticResource AyScrollMouseOut}"/>
                            </Trigger.ExitActions>
                            <Trigger.EnterActions>
                                <BeginStoryboard  Storyboard="{StaticResource AyScrollMouseOver}"/>
                            </Trigger.EnterActions>
                        </Trigger>
                    </ControlTemplate.Triggers>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
        <Style.Triggers>
            <Trigger Property="Orientation" Value="Horizontal">
                <Setter Property="Width" Value="Auto"/>
                <Setter Property="MinWidth" Value="0"/>
                <Setter Property="Height" Value="{DynamicResource ScrollViewerWH}"/>
                <Setter Property="MinHeight" Value="8.0"/>
                <Setter Property="Template">
                    <Setter.Value>
                        <ControlTemplate TargetType="{x:Type ScrollBar}">
                            <Grid x:Name="Bg" SnapsToDevicePixels="true" Cursor="SizeAll">
                                <Track x:Name="PART_Track"  IsEnabled="{TemplateBinding IsMouseOver}" Visibility="Hidden" Opacity="0">
                                    <Track.DecreaseRepeatButton>
                                        <RepeatButton Command="{x:Static ScrollBar.PageLeftCommand}" Style="{StaticResource RepeatButtonTransparent}"/>
                                    </Track.DecreaseRepeatButton>
                                    <Track.IncreaseRepeatButton>
                                        <RepeatButton Command="{x:Static ScrollBar.PageRightCommand}" Style="{StaticResource RepeatButtonTransparent}"/>
                                    </Track.IncreaseRepeatButton>
                                    <Track.Thumb>
                                        <Thumb Style="{StaticResource ScrollBarThumbHorizontal}"/>
                                    </Track.Thumb>
                                </Track>
                            </Grid>
                            <ControlTemplate.Triggers>
                                <Trigger Property="IsMouseOver" Value="true">
                                    <Trigger.ExitActions>
                                        <BeginStoryboard Storyboard="{StaticResource AyScrollMouseOut}"/>
                                    </Trigger.ExitActions>
                                    <Trigger.EnterActions>
                                        <BeginStoryboard  Storyboard="{StaticResource AyScrollMouseOver}"/>
                                    </Trigger.EnterActions>
                                </Trigger>
                            </ControlTemplate.Triggers>
                        </ControlTemplate>
                    </Setter.Value>
                </Setter>
            </Trigger>
        </Style.Triggers>
    </Style>
    <Style TargetType="{x:Type ScrollViewer}" x:Key="{x:Type ScrollViewer}">
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate  TargetType="{x:Type ScrollViewer}">
                    <Grid x:Name="Grid" Background="{TemplateBinding Background}">
                        <Grid.ColumnDefinitions>
                            <ColumnDefinition Width="*"/>
                            <ColumnDefinition Width="Auto"/>
                        </Grid.ColumnDefinitions>
                        <Grid.RowDefinitions>
                            <RowDefinition Height="*"/>
                            <RowDefinition Height="Auto"/>
                        </Grid.RowDefinitions>
                        <ScrollContentPresenter x:Name="PART_ScrollContentPresenter" Grid.ColumnSpan="2" Grid.RowSpan="2" CanContentScroll="{TemplateBinding CanContentScroll}" CanHorizontallyScroll="False" CanVerticallyScroll="False" ContentTemplate="{TemplateBinding ContentTemplate}" Content="{TemplateBinding Content}" Grid.Column="0" Margin="{TemplateBinding Padding}" Grid.Row="0"/>
                        <ScrollBar x:Name="PART_VerticalScrollBar"  AutomationProperties.AutomationId="VerticalScrollBar" Cursor="Arrow" Grid.Column="1" Maximum="{TemplateBinding ScrollableHeight}" Minimum="0" Grid.Row="0" Visibility="{TemplateBinding ComputedVerticalScrollBarVisibility}" Value="{Binding VerticalOffset, Mode=OneWay, RelativeSource={RelativeSource TemplatedParent}}" ViewportSize="{TemplateBinding ViewportHeight}" Style="{DynamicResource AyScrollBarStyle}"/>
                        <ScrollBar x:Name="PART_HorizontalScrollBar" Grid.ColumnSpan="2" AutomationProperties.AutomationId="HorizontalScrollBar" Cursor="Arrow" Grid.Column="0" Maximum="{TemplateBinding ScrollableWidth}" Minimum="0" Orientation="Horizontal" Grid.Row="1" Visibility="{TemplateBinding ComputedHorizontalScrollBarVisibility}" Value="{Binding HorizontalOffset, Mode=OneWay, RelativeSource={RelativeSource TemplatedParent}}" ViewportSize="{TemplateBinding ViewportWidth}" Style="{DynamicResource AyScrollBarStyle}"/>
                    </Grid>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>

    <!--窗体 2015-6-5 16:25:59 迁移-->
    <Style x:Key="Win_RightButton_Close" TargetType="{x:Type Button}">
        <Setter Property="FocusVisualStyle" Value="{x:Null}"/>
        <Setter Property="Foreground" Value="{DynamicResource Win_RightButton.Stroke}"/>
        <Setter Property="HorizontalContentAlignment" Value="Center"/>
        <Setter Property="VerticalContentAlignment" Value="Center"/>
        <Setter Property="Cursor" Value="Hand"/>
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type Button}">
                    <Border x:Name="border"  BorderThickness="0" Background="#00D94747" SnapsToDevicePixels="true">
                        <VisualStateManager.VisualStateGroups>
                            <VisualStateGroup x:Name="CommonStates">
                                <VisualStateGroup.Transitions>
                                    <VisualTransition GeneratedDuration="0:0:0.2"/>
                                    <VisualTransition From="MouseOver" GeneratedDuration="0:0:0.2" To="Normal">
                                        <VisualTransition.GeneratedEasingFunction>
                                            <CircleEase EasingMode="EaseIn"/>
                                        </VisualTransition.GeneratedEasingFunction>
                                    </VisualTransition>
                                    <VisualTransition From="Normal" GeneratedDuration="0:0:0.1" To="MouseOver">
                                        <VisualTransition.GeneratedEasingFunction>
                                            <CircleEase EasingMode="EaseOut"/>
                                        </VisualTransition.GeneratedEasingFunction>
                                    </VisualTransition>
                                </VisualStateGroup.Transitions>
                                <VisualState x:Name="Normal"/>
                                <VisualState x:Name="MouseOver">
                                    <Storyboard>
                                        <ColorAnimationUsingKeyFrames Storyboard.TargetProperty="(Panel.Background).(SolidColorBrush.Color)" Storyboard.TargetName="border">
                                            <EasingColorKeyFrame KeyTime="0" Value="{StaticResource Win_RightButton_Close.Hover.Background}"/>
                                        </ColorAnimationUsingKeyFrames>
                                    </Storyboard>
                                </VisualState>
                                <VisualState x:Name="Pressed">
                                    <Storyboard>
                                        <ColorAnimationUsingKeyFrames Storyboard.TargetProperty="(Panel.Background).(SolidColorBrush.Color)" Storyboard.TargetName="border">
                                            <EasingColorKeyFrame KeyTime="0" Value="{StaticResource Win_RightButton_Close.Pressed.Background}"/>
                                        </ColorAnimationUsingKeyFrames>
                                    </Storyboard>
                                </VisualState>
                                <VisualState x:Name="Disabled">
                                    <Storyboard>
                                        <DoubleAnimationUsingKeyFrames Storyboard.TargetProperty="(UIElement.Opacity)" Storyboard.TargetName="border">
                                            <EasingDoubleKeyFrame KeyTime="0" Value="0.5"/>
                                        </DoubleAnimationUsingKeyFrames>
                                    </Storyboard>
                                </VisualState>
                            </VisualStateGroup>
                        </VisualStateManager.VisualStateGroups>
                        <ContentPresenter x:Name="contentPresenter" Focusable="False" HorizontalAlignment="{TemplateBinding HorizontalContentAlignment}" Margin="{TemplateBinding Padding}" RecognizesAccessKey="True" SnapsToDevicePixels="{TemplateBinding SnapsToDevicePixels}" VerticalAlignment="{TemplateBinding VerticalContentAlignment}"/>
                    </Border>
                    <ControlTemplate.Triggers>
                        <Trigger Property="IsMouseOver" Value="true">
                            <Setter Property="Foreground" Value="{StaticResource Win_RightButton_Close.Hover.Stroke}"/>
                        </Trigger>
                        <Trigger Property="IsEnabled" Value="false">
                            <Setter Property="Opacity" Value="0.5"/>
                        </Trigger>
                    </ControlTemplate.Triggers>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>
    <Style x:Key="Win_RightButton_Other" TargetType="{x:Type Button}">
        <Setter Property="FocusVisualStyle" Value="{x:Null}"/>
        <Setter Property="Foreground" Value="{DynamicResource Win_RightButton.Stroke}"/>
        <Setter Property="HorizontalContentAlignment" Value="Center"/>
        <Setter Property="VerticalContentAlignment" Value="Center"/>
        <Setter Property="Cursor" Value="Hand"/>
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type Button}">
                    <Border x:Name="border"  BorderThickness="0" Background="#002969B3" SnapsToDevicePixels="true">
                        <VisualStateManager.VisualStateGroups>
                            <VisualStateGroup x:Name="CommonStates">
                                <VisualStateGroup.Transitions>
                                    <VisualTransition GeneratedDuration="0:0:0.2"/>
                                    <VisualTransition From="MouseOver" GeneratedDuration="0:0:0.2" To="Normal">
                                        <VisualTransition.GeneratedEasingFunction>
                                            <CircleEase EasingMode="EaseIn"/>
                                        </VisualTransition.GeneratedEasingFunction>
                                    </VisualTransition>
                                    <VisualTransition From="Normal" GeneratedDuration="0:0:0.1" To="MouseOver">
                                        <VisualTransition.GeneratedEasingFunction>
                                            <CircleEase EasingMode="EaseOut"/>
                                        </VisualTransition.GeneratedEasingFunction>
                                    </VisualTransition>
                                </VisualStateGroup.Transitions>
                                <VisualState x:Name="Normal"/>
                                <VisualState x:Name="MouseOver">
                                    <Storyboard>
                                        <ColorAnimationUsingKeyFrames Storyboard.TargetProperty="(Panel.Background).(SolidColorBrush.Color)" Storyboard.TargetName="border">
                                            <EasingColorKeyFrame KeyTime="0" Value="{StaticResource Win_RightButton_Other.Hover.Background}"/>
                                        </ColorAnimationUsingKeyFrames>
                                    </Storyboard>
                                </VisualState>
                                <VisualState x:Name="Pressed">
                                    <Storyboard>
                                        <ColorAnimationUsingKeyFrames Storyboard.TargetProperty="(Panel.Background).(SolidColorBrush.Color)" Storyboard.TargetName="border">
                                            <EasingColorKeyFrame KeyTime="0" Value="{StaticResource Win_RightButton_Other.Pressed.Background}"/>
                                        </ColorAnimationUsingKeyFrames>
                                    </Storyboard>
                                </VisualState>
                                <VisualState x:Name="Disabled">
                                    <Storyboard>
                                        <DoubleAnimationUsingKeyFrames Storyboard.TargetProperty="(UIElement.Opacity)" Storyboard.TargetName="border">
                                            <EasingDoubleKeyFrame KeyTime="0" Value="0.5"/>
                                        </DoubleAnimationUsingKeyFrames>
                                    </Storyboard>
                                </VisualState>
                            </VisualStateGroup>
                        </VisualStateManager.VisualStateGroups>
                        <ContentPresenter x:Name="contentPresenter" Focusable="False" HorizontalAlignment="{TemplateBinding HorizontalContentAlignment}" Margin="{TemplateBinding Padding}" RecognizesAccessKey="True" SnapsToDevicePixels="{TemplateBinding SnapsToDevicePixels}" VerticalAlignment="{TemplateBinding VerticalContentAlignment}"/>
                    </Border>
                    <ControlTemplate.Triggers>
                        <Trigger Property="IsMouseOver" Value="true">
                            <Setter Property="Foreground" Value="{StaticResource Win_RightButton_Other.Hover.Stroke}"/>
                        </Trigger>
                        <Trigger Property="IsEnabled" Value="false">
                            <Setter Property="Opacity" Value="0.5"/>
                        </Trigger>
                    </ControlTemplate.Triggers>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>
    <control:AyComboboxHeightConverter x:Key="AyComboboxHeightConverter1" AddValue="1.0"/>
    
    <Style x:Key="{x:Type CheckBox}" TargetType="{x:Type CheckBox}">
        <Setter Property="FocusVisualStyle" Value="{x:Null}"/>
        <Setter Property="Background" Value="{StaticResource AyCheckBox.Static.Background}"/>
        <Setter Property="BorderBrush" Value="{StaticResource AyCheckBox.Static.BorderBrush}"/>
        <Setter Property="Foreground" Value="{StaticResource AyCheckBox.Static.Foreground}"/>
        <Setter Property="BorderThickness" Value="1"/>
        <Setter Property="Padding" Value="5,4"/>
        <Setter Property="VerticalAlignment" Value="Center"/>
        <Setter Property="VerticalContentAlignment" Value="Center"/>
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type CheckBox}">
                    <ControlTemplate.Resources>
                        <Storyboard x:Key="AyWhenCheckedBox">
                            <DoubleAnimationUsingKeyFrames Storyboard.TargetProperty="(UIElement.Opacity)" Storyboard.TargetName="indeterminateMark">
                                <EasingDoubleKeyFrame KeyTime="0" Value="0"/>
                            </DoubleAnimationUsingKeyFrames>
                            <DoubleAnimationUsingKeyFrames Storyboard.TargetProperty="(FrameworkElement.Width)" Storyboard.TargetName="optionMark">
                                <EasingDoubleKeyFrame KeyTime="0" Value="0">
                                    <EasingDoubleKeyFrame.EasingFunction>
                                        <CircleEase EasingMode="EaseOut"/>
                                    </EasingDoubleKeyFrame.EasingFunction>
                                </EasingDoubleKeyFrame>
                                <EasingDoubleKeyFrame KeyTime="0:0:0.2" Value="17"/>
                                <EasingDoubleKeyFrame KeyTime="0:0:0.3" Value="11"/>
                            </DoubleAnimationUsingKeyFrames>
                            <ThicknessAnimationUsingKeyFrames Storyboard.TargetProperty="(Border.Padding)" Storyboard.TargetName="CheckOutBorder">
                                <EasingThicknessKeyFrame KeyTime="0:0:0.1" Value="4"/>
                                <EasingThicknessKeyFrame KeyTime="0:0:0.2" Value="1"/>
                                <EasingThicknessKeyFrame KeyTime="0:0:0.3" Value="4"/>
                            </ThicknessAnimationUsingKeyFrames>
                        </Storyboard>
                        <Storyboard x:Key="AyWhenCheckBoxUnCheck">
                            <DoubleAnimationUsingKeyFrames Storyboard.TargetProperty="(FrameworkElement.Width)" Storyboard.TargetName="optionMark">
                                <EasingDoubleKeyFrame KeyTime="0" Value="11"/>
                                <EasingDoubleKeyFrame KeyTime="0:0:0.1" Value="17"/>
                                <EasingDoubleKeyFrame KeyTime="0:0:0.3" Value="0"/>
                            </DoubleAnimationUsingKeyFrames>
                            <ThicknessAnimationUsingKeyFrames Storyboard.TargetProperty="(Border.Padding)" Storyboard.TargetName="CheckOutBorder">
                                <EasingThicknessKeyFrame KeyTime="0" Value="4"/>
                                <EasingThicknessKeyFrame KeyTime="0:0:0.1" Value="1"/>
                                <EasingThicknessKeyFrame KeyTime="0:0:0.2" Value="4"/>
                            </ThicknessAnimationUsingKeyFrames>
                            <DoubleAnimationUsingKeyFrames Storyboard.TargetProperty="(UIElement.Opacity)" Storyboard.TargetName="indeterminateMark">
                                <EasingDoubleKeyFrame KeyTime="0" Value="0"/>
                                <EasingDoubleKeyFrame KeyTime="0:0:0.3" Value="1"/>
                            </DoubleAnimationUsingKeyFrames>
                        </Storyboard>
                        <Storyboard x:Key="AyCheckBoxNull">
                            <ThicknessAnimationUsingKeyFrames Storyboard.TargetProperty="(FrameworkElement.Margin)" Storyboard.TargetName="nullMark">
                                <EasingThicknessKeyFrame KeyTime="0" Value="9"></EasingThicknessKeyFrame>
                                <EasingThicknessKeyFrame KeyTime="0:0:0.2" Value="1"/>
                                <EasingThicknessKeyFrame KeyTime="0:0:0.3" Value="3"/>
                            </ThicknessAnimationUsingKeyFrames>
                        </Storyboard>
                        <Storyboard x:Key="AyCheckBoxNullExit">
                            <ThicknessAnimationUsingKeyFrames Storyboard.TargetProperty="(FrameworkElement.Margin)" Storyboard.TargetName="nullMark">
                                <EasingThicknessKeyFrame KeyTime="0" Value="3">
                                    <EasingThicknessKeyFrame.EasingFunction>
                                        <CircleEase EasingMode="EaseOut"/>
                                    </EasingThicknessKeyFrame.EasingFunction>
                                </EasingThicknessKeyFrame>
                                <EasingThicknessKeyFrame KeyTime="0:0:0.1" Value="1"/>
                                <EasingThicknessKeyFrame KeyTime="0:0:0.3" Value="9"/>
                            </ThicknessAnimationUsingKeyFrames>
                        </Storyboard>
                    </ControlTemplate.Resources>
                    <StackPanel Orientation="Horizontal"   x:Name="templateRoot" Background="Transparent" SnapsToDevicePixels="True">
                        <Border x:Name="CheckOutBorder" Padding="4" Width="21" Height="21">
                            <Border x:Name="checkBoxBorder" BorderBrush="{TemplateBinding BorderBrush}" BorderThickness="1" Background="{TemplateBinding Background}" HorizontalAlignment="{TemplateBinding HorizontalContentAlignment}" VerticalAlignment="{TemplateBinding VerticalContentAlignment}" MinWidth="13" MinHeight="13">
                                <Grid x:Name="markGrid" >
                                    <Path Width="0" x:Name="optionMark" Stretch="Uniform" RenderTransformOrigin="0.5,0.5" Data="F1M5.095,11.131C5.095,11.131 1.107,16.095 1.107,16.095 1.107,16.095 3.991,19.357 6.277,22.564 6.559,22.96 6.843,23.381 7.12,23.806 8.392,25.761 9.503,27.798 9.503,27.798 9.503,27.798 11.786,27.952 11.786,27.952 11.786,27.952 16.066,21.908 20.851,15.898 26.005,9.425 31.94,4.202 31.94,4.202 31.94,4.202 29.714,1.476 29.714,1.476 29.714,1.476 24.586,4.752 20.043,8.787 17.521,11.026 11.628,18.722 11.628,18.722 11.628,18.722 10.19,18.667 10.19,18.667 10.19,18.667 8.573,15.665 7.842,14.508 6.569,12.494 5.095,11.131 5.095,11.131z" Fill="{StaticResource AyCheckBox.OptionMark.Static.Glyph}"  />
                                    <Rectangle Margin="1" x:Name="indeterminateMark" Fill="{StaticResource AyCheckBox.IndeterminateMark.Static.BackGround}"  Opacity="1"/>
                                    <Rectangle Margin="9" x:Name="nullMark" Fill="{StaticResource AyCheckBox.OptionMark.Static.Glyph}" />
                                </Grid>
                            </Border>
                        </Border>
                        <ContentPresenter x:Name="contentPresenter" Focusable="False" HorizontalAlignment="{TemplateBinding HorizontalContentAlignment}" Margin="{TemplateBinding Padding}"  SnapsToDevicePixels="{TemplateBinding SnapsToDevicePixels}" VerticalAlignment="Center"/>
                    </StackPanel>
                    <ControlTemplate.Triggers>
                        <Trigger Property="IsMouseOver" Value="true">
                            <Setter Property="Background" TargetName="checkBoxBorder" Value="{StaticResource AyCheckBox.OptionMark.MouseOver.Background}"/>
                            <Setter Property="BorderBrush" TargetName="checkBoxBorder" Value="{StaticResource AyCheckBox.OptionMark.MouseOver.Border}"/>
                            <Setter Property="Opacity" TargetName="indeterminateMark" Value="0"/>
                        </Trigger>
                        <!--<Trigger Property="IsEnabled" Value="false">
                            <Setter Property="Opacity" Value="0.5"/>
                        </Trigger>-->
                        <Trigger Property="IsChecked" Value="True">
                            <Trigger.EnterActions>
                                <BeginStoryboard x:Name="AyWhenCheckedBox_BeginStoryboard" Storyboard="{StaticResource AyWhenCheckedBox}"/>
                            </Trigger.EnterActions>
                            <Trigger.ExitActions>
                                <BeginStoryboard x:Name="AyWhenCheckBoxUnCheck_BeginStoryboard" Storyboard="{StaticResource AyWhenCheckBoxUnCheck}"/>
                            </Trigger.ExitActions>
                            <Setter Property="Opacity" TargetName="indeterminateMark" Value="0"/>
                            <Setter Property="Background" TargetName="checkBoxBorder" Value="{StaticResource AyCheckBox.OptionMark.MouseOver.Background}"/>
                            <Setter Property="BorderBrush" TargetName="checkBoxBorder" Value="{StaticResource AyCheckBox.OptionMark.MouseOver.Border}"/>
                        </Trigger>
                        <Trigger Property="IsChecked" Value="{x:Null}">
                            <Trigger.ExitActions>
                                <BeginStoryboard x:Name="AyCheckBoxNullExit_BeginStoryboard" Storyboard="{StaticResource AyCheckBoxNullExit}"/>
                            </Trigger.ExitActions>
                            <Trigger.EnterActions>
                                <BeginStoryboard x:Name="AyCheckBoxNull_BeginStoryboard" Storyboard="{StaticResource AyCheckBoxNull}"/>
                            </Trigger.EnterActions>
                            <Setter Property="Opacity" TargetName="indeterminateMark" Value="0"/>
                            <Setter Property="BorderBrush" TargetName="checkBoxBorder" Value="{StaticResource AyCheckBox.OptionMark.MouseOver.Border}"/>
                            <Setter Property="Background" TargetName="checkBoxBorder" Value="{StaticResource AyCheckBox.OptionMark.MouseOver.Background}"/>
                        </Trigger>
                    </ControlTemplate.Triggers>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>
    <Style x:Key="{x:Type RadioButton}" TargetType="{x:Type RadioButton}">
        <Setter Property="FocusVisualStyle" Value="{x:Null}"/>
        <Setter Property="Background" Value="{StaticResource AyCheckBox.Static.Background}"/>
        <Setter Property="BorderBrush" Value="{StaticResource AyCheckBox.Static.BorderBrush}"/>
        <Setter Property="Foreground" Value="{StaticResource AyCheckBox.Static.Foreground}"/>
        <Setter Property="BorderThickness" Value="1"/>
        <Setter Property="Padding" Value="5,4"/>
        <Setter Property="VerticalAlignment" Value="Center"/>
        <Setter Property="VerticalContentAlignment" Value="Center"/>
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type RadioButton}">
                    <ControlTemplate.Resources>
                        <Storyboard x:Key="AyNormalRadioWhenCheck">
                            <DoubleAnimationUsingKeyFrames Storyboard.TargetProperty="(FrameworkElement.Width)" Storyboard.TargetName="optionMark">
                                <EasingDoubleKeyFrame KeyTime="0" Value="0">
                                    <EasingDoubleKeyFrame.EasingFunction>
                                        <CircleEase EasingMode="EaseOut"/>
                                    </EasingDoubleKeyFrame.EasingFunction>
                                </EasingDoubleKeyFrame>
                                <EasingDoubleKeyFrame KeyTime="0:0:0.15" Value="15"/>
                                <EasingDoubleKeyFrame KeyTime="0:0:0.3" Value="5"/>
                            </DoubleAnimationUsingKeyFrames>
                            <DoubleAnimationUsingKeyFrames Storyboard.TargetProperty="(FrameworkElement.Height)" Storyboard.TargetName="optionMark">
                                <EasingDoubleKeyFrame KeyTime="0" Value="0">
                                    <EasingDoubleKeyFrame.EasingFunction>
                                        <CircleEase EasingMode="EaseOut"/>
                                    </EasingDoubleKeyFrame.EasingFunction>
                                </EasingDoubleKeyFrame>
                                <EasingDoubleKeyFrame KeyTime="0:0:0.15" Value="15"/>
                                <EasingDoubleKeyFrame KeyTime="0:0:0.3" Value="5"/>
                            </DoubleAnimationUsingKeyFrames>
                            <ThicknessAnimationUsingKeyFrames Storyboard.TargetProperty="(Border.Padding)" Storyboard.TargetName="radioButtonOutBorder">
                                <EasingThicknessKeyFrame KeyTime="0:0:0.1" Value="4"/>
                                <EasingThicknessKeyFrame KeyTime="0:0:0.2" Value="0"/>
                                <EasingThicknessKeyFrame KeyTime="0:0:0.3" Value="4"/>
                            </ThicknessAnimationUsingKeyFrames>
                            <DoubleAnimationUsingKeyFrames Storyboard.TargetProperty="(FrameworkElement.Width)" Storyboard.TargetName="radioButtonBorder">
                                <EasingDoubleKeyFrame KeyTime="0:0:0.1" Value="13"/>
                                <EasingDoubleKeyFrame KeyTime="0:0:0.2" Value="20"/>
                                <EasingDoubleKeyFrame KeyTime="0:0:0.3" Value="13"/>
                            </DoubleAnimationUsingKeyFrames>
                            <DoubleAnimationUsingKeyFrames Storyboard.TargetProperty="(FrameworkElement.Height)" Storyboard.TargetName="radioButtonBorder">
                                <EasingDoubleKeyFrame KeyTime="0:0:0.1" Value="13"/>
                                <EasingDoubleKeyFrame KeyTime="0:0:0.2" Value="20"/>
                                <EasingDoubleKeyFrame KeyTime="0:0:0.3" Value="13"/>
                            </DoubleAnimationUsingKeyFrames>
                        </Storyboard>
                        <Storyboard x:Key="AyNormalRadioWhenUnCheck">
                            <DoubleAnimationUsingKeyFrames Storyboard.TargetProperty="(FrameworkElement.Width)" Storyboard.TargetName="optionMark">
                                <SplineDoubleKeyFrame KeyTime="0" Value="5"/>
                                <SplineDoubleKeyFrame KeyTime="0:0:0.2" Value="8"/>
                                <SplineDoubleKeyFrame KeyTime="0:0:0.3" Value="0"/>
                            </DoubleAnimationUsingKeyFrames>
                            <DoubleAnimationUsingKeyFrames Storyboard.TargetProperty="(FrameworkElement.Height)" Storyboard.TargetName="optionMark">
                                <SplineDoubleKeyFrame KeyTime="0" Value="5"/>
                                <SplineDoubleKeyFrame KeyTime="0:0:0.2" Value="8"/>
                                <SplineDoubleKeyFrame KeyTime="0:0:0.3" Value="0"/>
                            </DoubleAnimationUsingKeyFrames>
                            <ThicknessAnimationUsingKeyFrames Storyboard.TargetProperty="(Border.Padding)" Storyboard.TargetName="radioButtonOutBorder">
                                <SplineThicknessKeyFrame KeyTime="0:0:0.2" Value="1"/>
                                <SplineThicknessKeyFrame KeyTime="0:0:0.3" Value="4"/>
                            </ThicknessAnimationUsingKeyFrames>
                            <DoubleAnimationUsingKeyFrames Storyboard.TargetProperty="(FrameworkElement.Width)" Storyboard.TargetName="radioButtonBorder">
                                <SplineDoubleKeyFrame KeyTime="0:0:0.2" Value="13"/>
                                <SplineDoubleKeyFrame KeyTime="0:0:0.3" Value="13"/>
                            </DoubleAnimationUsingKeyFrames>
                            <DoubleAnimationUsingKeyFrames Storyboard.TargetProperty="(FrameworkElement.Height)" Storyboard.TargetName="radioButtonBorder">
                                <SplineDoubleKeyFrame KeyTime="0:0:0.2" Value="13"/>
                                <SplineDoubleKeyFrame KeyTime="0:0:0.3" Value="13"/>
                            </DoubleAnimationUsingKeyFrames>
                        </Storyboard>
                    </ControlTemplate.Resources>
                    <StackPanel Orientation="Horizontal"   x:Name="templateRoot" Background="Transparent" SnapsToDevicePixels="True">
                        <Border x:Name="radioButtonOutBorder" Padding="4" Width="21" Height="21">
                            <Border Width="13" Height="13" x:Name="radioButtonBorder" CornerRadius="50" BorderBrush="{TemplateBinding BorderBrush}" BorderThickness="1" Background="{TemplateBinding Background}" HorizontalAlignment="Center" VerticalAlignment="{TemplateBinding VerticalContentAlignment}" MinWidth="13" MinHeight="13">
                                <Grid x:Name="markGrid" HorizontalAlignment="Center"  VerticalAlignment="Center">
                                    <Ellipse HorizontalAlignment="Center"  VerticalAlignment="Center" Width="5" Height="5" SnapsToDevicePixels="True" x:Name="optionMark" Fill="{StaticResource AyCheckBox.OptionMark.Static.Glyph}"/>
                                </Grid>
                            </Border>
                        </Border>
                        <ContentPresenter x:Name="contentPresenter" Focusable="False" HorizontalAlignment="{TemplateBinding HorizontalContentAlignment}" Margin="{TemplateBinding Padding}"  SnapsToDevicePixels="{TemplateBinding SnapsToDevicePixels}" VerticalAlignment="Center"/>
                    </StackPanel>
                    <ControlTemplate.Triggers>
                        <Trigger Property="IsChecked" Value="False">
                            <Trigger.ExitActions>
                                <BeginStoryboard Storyboard="{StaticResource AyNormalRadioWhenCheck}"/>
                            </Trigger.ExitActions>
                            <Trigger.EnterActions>
                                <BeginStoryboard x:Name="AyNormalRadioWhenUnCheck_BeginStoryboard1" Storyboard="{StaticResource AyNormalRadioWhenUnCheck}"/>
                            </Trigger.EnterActions>
                        </Trigger>
                        <Trigger Property="IsMouseOver" Value="true">
                            <Setter Property="Background" TargetName="radioButtonBorder" Value="{StaticResource AyCheckBox.OptionMark.MouseOver.Background}"/>
                            <Setter Property="BorderBrush" TargetName="radioButtonBorder" Value="{StaticResource AyCheckBox.OptionMark.MouseOver.Border}"/>
                        </Trigger>
                        <!--<Trigger Property="IsEnabled" Value="false">
                            <Setter Property="Opacity" Value="0.5"/>
                        </Trigger>-->
                        <Trigger Property="IsChecked" Value="true">
                            <Trigger.ExitActions>
                                <BeginStoryboard x:Name="AyNormalRadioWhenUnCheck_BeginStoryboard" Storyboard="{StaticResource AyNormalRadioWhenUnCheck}"/>
                            </Trigger.ExitActions>
                            <Trigger.EnterActions>
                                <BeginStoryboard Storyboard="{StaticResource AyNormalRadioWhenCheck}"/>
                            </Trigger.EnterActions>
                            <Setter Property="Background" TargetName="radioButtonBorder" Value="{StaticResource AyCheckBox.OptionMark.MouseOver.Background}"/>
                            <Setter Property="BorderBrush" TargetName="radioButtonBorder" Value="{StaticResource AyCheckBox.OptionMark.MouseOver.Border}"/>
                        </Trigger>
                        <Trigger Property="IsChecked" Value="{x:Null}">
                            <Setter Property="Opacity" TargetName="optionMark" Value="0.7"/>
                        </Trigger>
                    </ControlTemplate.Triggers>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>
    
    <Style x:Key="AyWindowBorder" TargetType="Border">
        <Setter Property="CornerRadius" Value="0" />
        <!--<Setter Property="BorderBrush" Value="#00ffffff" /> <Setter Property="BorderThickness" Value="1" />-->
        <Setter Property="HorizontalAlignment" Value="Stretch" />
        <Setter Property="VerticalAlignment" Value="Stretch" />
    </Style>
    <ControlTemplate x:Key="ayWindowTemplate" TargetType="{x:Type control:AyWindow}">
        <Grid>
          
            <Border  Background="#00FFFFFF" BorderBrush="#F64D4D4D" Margin="{Binding RelativeSource={RelativeSource TemplatedParent},Path=ShadowMargin}" BorderThickness="{Binding Path=ShadowBorderThickness,RelativeSource={RelativeSource TemplatedParent},Mode=TwoWay}" HorizontalAlignment="Stretch"  VerticalAlignment="Stretch" >
                <Border.Effect>
                    <BlurEffect Radius="{Binding Path=ShadowRadius,RelativeSource={RelativeSource TemplatedParent},Mode=TwoWay}"/>
                </Border.Effect>
            </Border>
            <Grid ClipToBounds="True" Margin="{Binding RelativeSource={RelativeSource TemplatedParent},Path=ShadowMargin}" Opacity="{Binding RectangleOpacity3,RelativeSource={RelativeSource AncestorType={x:Type control:AyWindow},Mode=FindAncestor}}">
                <Border Background="{TemplateBinding Background}" HorizontalAlignment="Stretch" VerticalAlignment="Stretch">
                </Border>
            </Grid>

            <!--方便调整窗体大小-->
            <Border Name="AyWindowDragBorder" BorderBrush="#00FFFFFF" Background="#00FFFFFF" BorderThickness="{Binding Path=ShadowBorderThickness,RelativeSource={RelativeSource TemplatedParent},Mode=TwoWay}" Style="{StaticResource AyWindowBorder}"></Border>
            <Border x:Name="AyWindowMovePanel"  Style="{StaticResource AyWindowBorder}"  Margin="{Binding RelativeSource={RelativeSource TemplatedParent},Path=ShadowMargin}">
                <Grid>
                    <Grid  Margin="{Binding TitleBarHeight,RelativeSource={RelativeSource TemplatedParent},Converter={StaticResource Number2ThicknessConverter1},ConverterParameter=上}">
                        <AdornerDecorator>
                            <ContentPresenter />
                        </AdornerDecorator>
                    </Grid>
                    <DockPanel  LastChildFill="True" Height="{TemplateBinding TitleBarHeight}" Background="{TemplateBinding WindowTitleBarBg}"  Name="top" VerticalAlignment="Top" HorizontalAlignment="Stretch">
                        <StackPanel DockPanel.Dock="Right" Orientation="Horizontal"  Margin="{TemplateBinding CloseButtonMargin}">

                            <Button x:Name="menuWindow"  Width="30" VerticalAlignment="Stretch" UseLayoutRounding="True"  SnapsToDevicePixels="True" Style="{DynamicResource Win_RightButton_Other}" Visibility="{TemplateBinding WindowMenuVisibility}">
                                <Canvas Width="12" Height="10">
                                    <Path Data="F1M7,4L7,3 8.001,3 8.001,2 9,2 9,1 10,1 10,0 0.001,0 0.001,1 1,1 1,2 2.001,2 2.001,3 3,3 3,4 4,4 4,5 6,5 6,4z" Fill="{StaticResource Win_RightButton_Fill_Background}" Height="5" Canvas.Left="1" Canvas.Top="5.001" Width="10"/>
                                    <Path Data="F1M0,2L10,2 10,0 0,0z" Fill="{StaticResource Win_RightButton_Fill_Background}" Height="2" Canvas.Left="1" Canvas.Top="1" Width="10"/>
                                    <Path Data="F1M0,1L1,1 1,0 0,0z" Fill="{Binding RelativeSource={RelativeSource Mode=FindAncestor,AncestorType={x:Type Button}},Path=Foreground}" Height="1" Canvas.Left="3" Canvas.Top="8.001" Width="1"/>
                                    <Path Data="F1M0,1L1,1 1,0 0,0z" Fill="{Binding RelativeSource={RelativeSource Mode=FindAncestor,AncestorType={x:Type Button}},Path=Foreground}" Height="1" Canvas.Left="4" Canvas.Top="9.001" Width="1"/>
                                    <Path Data="F1M0,1L2,1 2,0 0,0z" Fill="{Binding RelativeSource={RelativeSource Mode=FindAncestor,AncestorType={x:Type Button}},Path=Foreground}" Height="1" Canvas.Left="5" Canvas.Top="10.001" Width="2"/>
                                    <Path Data="F1M0,1L1,1 1,0 0,0z" Fill="{Binding RelativeSource={RelativeSource Mode=FindAncestor,AncestorType={x:Type Button}},Path=Foreground}" Height="1" Canvas.Left="6.999" Canvas.Top="9.001" Width="1"/>
                                    <Path Data="F1M0,1L1,1 1,0 0,0z" Fill="{Binding RelativeSource={RelativeSource Mode=FindAncestor,AncestorType={x:Type Button}},Path=Foreground}" Height="1" Canvas.Left="1" Canvas.Top="6.001" Width="1"/>
                                    <Path Data="F1M0,1.001L1,1.001 1,0 0,0z" Fill="{Binding RelativeSource={RelativeSource Mode=FindAncestor,AncestorType={x:Type Button}},Path=Foreground}" Height="1.001" Canvas.Left="2" Canvas.Top="7" Width="1"/>
                                    <Path Data="F1M0,1L1.001,1 1.001,0 0,0z" Fill="{Binding RelativeSource={RelativeSource Mode=FindAncestor,AncestorType={x:Type Button}},Path=Foreground}" Height="1" Canvas.Left="9.999" Canvas.Top="6.001" Width="1.001"/>
                                    <Path Data="F1M0,0.001L0,2.001 1,2.001 1,1 11,1 11,2.001 12,2.001 12,0.001z" Fill="{Binding RelativeSource={RelativeSource Mode=FindAncestor,AncestorType={x:Type Button}},Path=Foreground}" Height="2" Canvas.Left="0" Canvas.Top="4" Width="12"/>
                                    <Path Data="F1M0,1L1,1 1,0 0,0z" Fill="{Binding RelativeSource={RelativeSource Mode=FindAncestor,AncestorType={x:Type Button}},Path=Foreground}" Height="1" Canvas.Left="7.999" Canvas.Top="8.001" Width="1"/>
                                    <Path Data="F1M0,1.001L1,1.001 1,0 0,0z" Fill="{Binding RelativeSource={RelativeSource Mode=FindAncestor,AncestorType={x:Type Button}},Path=Foreground}" Height="1.001" Canvas.Left="8.999" Canvas.Top="7" Width="1"/>
                                    <Path Data="F1M11,3L1,3 1,1 11,1z M0,4L12,4 12,0 0,0z" Fill="{Binding RelativeSource={RelativeSource Mode=FindAncestor,AncestorType={x:Type Button}},Path=Foreground}" Height="4" Canvas.Left="0" Canvas.Top="0" Width="12"/>
                                </Canvas>
                            </Button>
                            <Button Visibility="{TemplateBinding MinButtonVisibility}" x:Name="MinBtn"  Width="30" VerticalAlignment="Stretch" UseLayoutRounding="True"  SnapsToDevicePixels="True" Style="{DynamicResource Win_RightButton_Other}">
                                <Canvas Width="12" Height="6">
                                    <Path Data="F1M10,2L0,2 0,0 10,0z" Fill="{StaticResource Win_RightButton_Fill_Background}" Height="2" Canvas.Left="1" Canvas.Top="1" Width="10"/>
                                    <Path Data="F1M11,3L1,3 1,1 11,1z M0,4L12,4 12,0 0,0z" Fill="{Binding RelativeSource={RelativeSource Mode=FindAncestor,AncestorType={x:Type Button}},Path=Foreground}" Height="4" Canvas.Left="0" Canvas.Top="0" Width="12"/>
                                </Canvas>
                            </Button>
                            <Grid  Width="30" Height="24" Visibility="{TemplateBinding MaxButtonVisibility}">
                                <Button x:Name="maxWindow"  Width="30"  VerticalAlignment="Stretch" UseLayoutRounding="True"  SnapsToDevicePixels="True" Style="{DynamicResource Win_RightButton_Other}" Visibility="{TemplateBinding maxWindowVisibility}">
                                    <Canvas Width="12" Height="10">
                                        <Path Data="F1M9,8L1,8 1,3 9,3z M0,9L10,9 10,0 0,0z" Fill="{StaticResource Win_RightButton_Fill_Background}" Height="9" Canvas.Left="1" Canvas.Top="1" Width="10"/>
                                        <Path Data="F1M7,4L1,4 1,1 7,1z M8,0L0,0 0,5 8,5z" Fill="{Binding RelativeSource={RelativeSource Mode=FindAncestor,AncestorType={x:Type Button}},Path=Foreground}" Height="5" Canvas.Left="2" Canvas.Top="4" Width="8"/>
                                        <Path Data="F1M11,10L1,10 1,1 11,1z M0,11L12,11 12,0 0,0z" Fill="{Binding RelativeSource={RelativeSource Mode=FindAncestor,AncestorType={x:Type Button}},Path=Foreground}" Height="11" Canvas.Left="0" Canvas.Top="0" Width="12"/>
                                    </Canvas>
                                </Button>
                                <Button x:Name="restoreWindow"   Width="30"  VerticalAlignment="Stretch" UseLayoutRounding="True"  SnapsToDevicePixels="True" Style="{DynamicResource Win_RightButton_Other}" Visibility="{TemplateBinding restoreWindowVisibility}">
                                    <Canvas Width="18" Height="15">
                                        <Path Data="F1M8,8L1,8 1,3 8,3z M0,9L9,9 9,0 0,0z" Fill="{StaticResource Win_RightButton_Fill_Background}" Height="9" Canvas.Left="1" Canvas.Top="6" Width="9"/>
                                        <Path Data="F1M0,0L0,4 1,4 1,3 8,3 8,8 6,8 6,9 9,9 9,0z" Fill="{StaticResource Win_RightButton_Fill_Background}" Height="9" Canvas.Left="5" Canvas.Top="1" Width="9"/>
                                        <Path Data="F1M6,4L1,4 1,1 6,1z M7,0L0,0 0,5 7,5z" Fill="{Binding RelativeSource={RelativeSource Mode=FindAncestor,AncestorType={x:Type Button}},Path=Foreground}" Height="5" Canvas.Left="2" Canvas.Top="9" Width="7"/>
                                        <Path Data="F1M14,10L11,10 11,9 13,9 13,4 6,4 6,5 5,5 5,1 14,1z M11,5L12,5 12,8 11,8z M10,15L1,15 1,6 10,6z M4,0L4,5 0,5 0,16 11,16 11,11 15,11 15,0z" Fill="{Binding RelativeSource={RelativeSource Mode=FindAncestor,AncestorType={x:Type Button}},Path=Foreground}" Height="16" Canvas.Left="0" Canvas.Top="0" Width="15"/>
                                    </Canvas>
                                </Button>
                            </Grid>
                            <Button x:Name="CloseBtn" Width="32"  VerticalAlignment="Stretch" UseLayoutRounding="True"  SnapsToDevicePixels="True" Style="{DynamicResource Win_RightButton_Close}" Visibility="{TemplateBinding CloseButtonVisibility}">
                                <Canvas Width="13" Height="11">
                                    <Path Data="F1M7,4L7,3 8,3 8,2 9,2 9,1 10,1 10,0 7,0 7,1 6,1 6,2 4,2 4,1 3,1 3,0 1,0 -0.001,0 -0.001,1 1,1 1,2 2,2 2,3 3,3 3,4 4,4 4,5 3,5 3,6 2,6 2,7 1,7 1,8 -0.001,8 -0.001,9 1,9 3,9 3,8 4,8 4,7 6,7 6,8 7,8 7,9 10,9 10,8 9,8 9,7 8,7 8,6 7,6 7,5 6,5 6,4z" Fill="{StaticResource Win_RightButton_Fill_Background}" Height="9" Canvas.Left="1" Canvas.Top="1" Width="10"/>
                                    <Path Data="F1M0,1L1.001,1 1.001,0 0,0z" Fill="{Binding RelativeSource={RelativeSource Mode=FindAncestor,AncestorType={x:Type Button}},Path=Foreground}" Height="1" Canvas.Left="3.999" Canvas.Top="9" Width="1.001"/>
                                    <Path Data="F1M0,1L1,1 1,0 0,0z" Fill="{Binding RelativeSource={RelativeSource Mode=FindAncestor,AncestorType={x:Type Button}},Path=Foreground}" Height="1" Canvas.Left="7" Canvas.Top="5" Width="1"/>
                                    <Path Data="F1M0,1L1,1 1,0 0,0z" Fill="{Binding RelativeSource={RelativeSource Mode=FindAncestor,AncestorType={x:Type Button}},Path=Foreground}" Height="1" Canvas.Left="9" Canvas.Top="3" Width="1"/>
                                    <Path Data="F1M0,1L1,1 1,0 0,0z" Fill="{Binding RelativeSource={RelativeSource Mode=FindAncestor,AncestorType={x:Type Button}},Path=Foreground}" Height="1" Canvas.Left="9.999" Canvas.Top="2" Width="1"/>
                                    <Path Data="F1M0,1L1,1 1,0 0,0z" Fill="{Binding RelativeSource={RelativeSource Mode=FindAncestor,AncestorType={x:Type Button}},Path=Foreground}" Height="1" Canvas.Left="8" Canvas.Top="4" Width="1"/>
                                    <Path Data="F1M0,1L2,1 2,0 0,0z" Fill="{Binding RelativeSource={RelativeSource Mode=FindAncestor,AncestorType={x:Type Button}},Path=Foreground}" Height="1" Canvas.Left="5" Canvas.Top="2" Width="2"/>
                                    <Path Data="F1M0,1L1,1 1,0 0,0z" Fill="{Binding RelativeSource={RelativeSource Mode=FindAncestor,AncestorType={x:Type Button}},Path=Foreground}" Height="1" Canvas.Left="7" Canvas.Top="9" Width="1"/>
                                    <Path Data="F1M0,1L1,1 1,0 0,0z" Fill="{Binding RelativeSource={RelativeSource Mode=FindAncestor,AncestorType={x:Type Button}},Path=Foreground}" Height="1" Canvas.Left="8" Canvas.Top="6" Width="1"/>
                                    <Path Data="F1M2,1L2,2.001 3,2.001 3,3 -0.001,3 -0.001,4 4,4 4,3 4,2.001 3,2.001 3,1 2,1 2,0.001 0.999,0.001 0.999,1z" Fill="{Binding RelativeSource={RelativeSource Mode=FindAncestor,AncestorType={x:Type Button}},Path=Foreground}" Height="4" Canvas.Left="8" Canvas.Top="7" Width="4"/>
                                    <Path Data="F1M0,1L2,1 2,0 0,0z" Fill="{Binding RelativeSource={RelativeSource Mode=FindAncestor,AncestorType={x:Type Button}},Path=Foreground}" Height="1" Canvas.Left="5" Canvas.Top="8" Width="2"/>
                                    <Path Data="F1M0,0L0,1 0,2 1,2 1,1 2,1 4,1 4,0z" Fill="{Binding RelativeSource={RelativeSource Mode=FindAncestor,AncestorType={x:Type Button}},Path=Foreground}" Height="2" Canvas.Left="0" Canvas.Top="0" Width="4"/>
                                    <Path Data="F1M0,1L1.001,1 1.001,0 0,0z" Fill="{Binding RelativeSource={RelativeSource Mode=FindAncestor,AncestorType={x:Type Button}},Path=Foreground}" Height="1" Canvas.Left="3.999" Canvas.Top="5" Width="1.001"/>
                                    <Path Data="F1M0,1L1,1 1,0 0,0z" Fill="{Binding RelativeSource={RelativeSource Mode=FindAncestor,AncestorType={x:Type Button}},Path=Foreground}" Height="1" Canvas.Left="0.999" Canvas.Top="2" Width="1"/>
                                    <Path Data="F1M-0.001,0L-0.001,1 3,1 3,2 4,2 4,1 4,0z" Fill="{Binding RelativeSource={RelativeSource Mode=FindAncestor,AncestorType={x:Type Button}},Path=Foreground}" Height="2" Canvas.Left="8" Canvas.Top="0" Width="4"/>
                                    <Path Data="F1M0,1L1,1 1,0 0,0z" Fill="{Binding RelativeSource={RelativeSource Mode=FindAncestor,AncestorType={x:Type Button}},Path=Foreground}" Height="1" Canvas.Left="7" Canvas.Top="1" Width="1"/>
                                    <Path Data="F1M0,1L1.001,1 1.001,0 0,0z" Fill="{Binding RelativeSource={RelativeSource Mode=FindAncestor,AncestorType={x:Type Button}},Path=Foreground}" Height="1" Canvas.Left="3.999" Canvas.Top="1" Width="1.001"/>
                                    <Path Data="F1M0,1L1,1 1,0 0,0z" Fill="{Binding RelativeSource={RelativeSource Mode=FindAncestor,AncestorType={x:Type Button}},Path=Foreground}" Height="1" Canvas.Left="2.999" Canvas.Top="6" Width="1"/>
                                    <Path Data="F1M2,1L1,1 1,2 0,2 0,3 0,4 4,4 4,3 2,3 1,3 1,2 2,2 2,1 3,1 3,0 2,0z" Fill="{Binding RelativeSource={RelativeSource Mode=FindAncestor,AncestorType={x:Type Button}},Path=Foreground}" Height="4" Canvas.Left="0" Canvas.Top="7" Width="4"/>
                                    <Path Data="F1M0,1L1,1 1,0 0,0z" Fill="{Binding RelativeSource={RelativeSource Mode=FindAncestor,AncestorType={x:Type Button}},Path=Foreground}" Height="1" Canvas.Left="2.999" Canvas.Top="4" Width="1"/>
                                    <Path Data="F1M0,1L1,1 1,0 0,0z" Fill="{Binding RelativeSource={RelativeSource Mode=FindAncestor,AncestorType={x:Type Button}},Path=Foreground}" Height="1" Canvas.Left="1.999" Canvas.Top="3" Width="1"/>
                                </Canvas>
                            </Button>
                        </StackPanel>
                        <Border x:Name="ToolBarContent" Margin="0,0,0,0" DockPanel.Dock="Right" Background="{Binding RelativeSource={RelativeSource TemplatedParent},Path=ToolBarBackground}" BorderBrush="{Binding RelativeSource={RelativeSource TemplatedParent},Path=ToolBarBrush}" BorderThickness="{Binding RelativeSource={RelativeSource TemplatedParent},Path=ToolBarBorderThickness }" CornerRadius="{Binding RelativeSource={RelativeSource TemplatedParent},Path=ToolBarCornerRadius}">
                            <ContentPresenter Content="{Binding RelativeSource={RelativeSource TemplatedParent},Path=ToolBarContent}"></ContentPresenter>
                        </Border>
                        <StackPanel HorizontalAlignment="Left" Margin="4,0,0,0" Orientation="Horizontal" VerticalAlignment="Stretch" Visibility="{TemplateBinding TitleVisibility}">
                            <Image Source="{TemplateBinding Icon}"  VerticalAlignment="Center"/>
                            <TextBlock Margin="4,0,0,0"  Foreground="White" Text="{TemplateBinding Title}" FontSize="12"  VerticalAlignment="Center" FontWeight="Normal" />
                        </StackPanel>
                    </DockPanel>
                </Grid>
            </Border>

        </Grid>

    </ControlTemplate>
    <Style x:Key="AyWindowStyle" TargetType="{x:Type control:AyWindow}">
        <Setter Property="Background" Value="#00B4B4B4" />
        <Setter Property="AllowsTransparency" Value="True" />
        <Setter Property="WindowStyle" Value="None" />
        <Setter Property="Template" Value="{StaticResource ayWindowTemplate}"></Setter>
        <Setter Property="RenderOptions.BitmapScalingMode" Value="Fant" />
        <Setter Property="UseLayoutRounding" Value="True" />
    </Style>

    <!--<Style x:Key="ExpandCollapseToggleStyle" TargetType="{x:Type ToggleButton}">
        <Setter Property="Focusable" Value="False" />
        <Setter Property="Width" Value="18" />
        <Setter Property="Height" Value="16" />
        <Setter Property="Cursor" Value="Hand"/>
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type ToggleButton}">
                    
                        <Image Source="Images/tree/folder_01.png" Width="18" Height="16" x:Name="ExpandPath"/>
                    
                    <ControlTemplate.Triggers>
                        <DataTrigger Binding="{Binding RelativeSource={RelativeSource Mode=FindAncestor, AncestorType={x:Type TreeViewItem}}, Path=IsExpanded}"   Value="True">
                            <Setter Property="Source" TargetName="ExpandPath" Value="Images/tree/folder_02.png"/>
                        </DataTrigger>
                    </ControlTemplate.Triggers>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>-->

    <Style x:Key="ExpandCollapseToggleStyle" TargetType="{x:Type ToggleButton}">
        <Setter Property="Focusable" Value="False" />
        <Setter Property="Width" Value="17" />
        <Setter Property="Height" Value="16" />
        <Setter Property="Cursor" Value="Hand"/>
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type ToggleButton}">
                    <Border Width="{Binding Width}" Height="{Binding Height}" Background="#00FFFFFF" >
                        <Viewbox Height="9"  Margin="6,0" HorizontalAlignment="Center" VerticalAlignment="Center">
                            <Path Opacity="0" x:Name="ExpandPath" Fill="{StaticResource AyTreeViewItem.AyExpanderSanJiao.Static.Background}"  Data="M470,148 L409.5,90.5 409.5,208.5 z"  Stretch="Fill" RenderTransformOrigin="0.5,0.5">
                                <Path.RenderTransform>
                                    <TransformGroup>
                                        <ScaleTransform/>
                                        <SkewTransform/>
                                        <RotateTransform/>
                                        <TranslateTransform/>
                                    </TransformGroup>
                                </Path.RenderTransform>
                            </Path>
                        </Viewbox>
                    </Border>
                    <ControlTemplate.Triggers>
                        <DataTrigger Binding="{Binding RelativeSource={RelativeSource Mode=FindAncestor, AncestorType={x:Type TreeView}}, Path=IsMouseOver}"   Value="True">
                            <DataTrigger.EnterActions>
                                <BeginStoryboard>
                                    <Storyboard>
                                        <DoubleAnimationUsingKeyFrames Storyboard.TargetProperty="Opacity" Storyboard.TargetName="ExpandPath">
                                            <EasingDoubleKeyFrame KeyTime="0:0:0.3" Value="1"/>
                                        </DoubleAnimationUsingKeyFrames>
                                    </Storyboard>
                                </BeginStoryboard>
                            </DataTrigger.EnterActions>
                            <DataTrigger.ExitActions>
                                <BeginStoryboard>
                                    <Storyboard>
                                        <DoubleAnimationUsingKeyFrames Storyboard.TargetProperty="Opacity" Storyboard.TargetName="ExpandPath">
                                            <EasingDoubleKeyFrame KeyTime="0:0:0.3" Value="0"/>
                                        </DoubleAnimationUsingKeyFrames>
                                    </Storyboard>
                                </BeginStoryboard>
                            </DataTrigger.ExitActions>
                        </DataTrigger>

                        <DataTrigger Binding="{Binding RelativeSource={RelativeSource Mode=FindAncestor, AncestorType={x:Type TreeViewItem}}, Path=IsExpanded}"   Value="True">
                            <DataTrigger.EnterActions>
                                <BeginStoryboard>
                                    <Storyboard>
                                        <DoubleAnimationUsingKeyFrames Storyboard.TargetProperty="(UIElement.RenderTransform).(TransformGroup.Children)[2].(RotateTransform.Angle)" Storyboard.TargetName="ExpandPath">
                                            <EasingDoubleKeyFrame KeyTime="0:0:0.2" Value="90"/>
                                        </DoubleAnimationUsingKeyFrames>
                                    </Storyboard>
                                </BeginStoryboard>
                            </DataTrigger.EnterActions>
                            <DataTrigger.ExitActions>
                                <BeginStoryboard>
                                    <Storyboard>
                                        <DoubleAnimationUsingKeyFrames Storyboard.TargetProperty="(UIElement.RenderTransform).(TransformGroup.Children)[2].(RotateTransform.Angle)" Storyboard.TargetName="ExpandPath">
                                            <EasingDoubleKeyFrame KeyTime="0:0:0.2" Value="0"/>
                                        </DoubleAnimationUsingKeyFrames>
                                    </Storyboard>
                                </BeginStoryboard>
                            </DataTrigger.ExitActions>
                        </DataTrigger>
                        <DataTrigger Binding="{Binding RelativeSource={RelativeSource Mode=FindAncestor, AncestorType={x:Type TreeViewItem}}, Path=IsSelected}"   Value="True">
                            <Setter TargetName="ExpandPath" Property="Fill" Value="{StaticResource AyTreeViewItem.AyExpanderSanJiao.Checked.Background}" />
                        </DataTrigger>

                        <Trigger Property="IsMouseOver" Value="True">
                            <Setter TargetName="ExpandPath" Property="Fill" Value="{StaticResource AyTreeViewItem.AyExpanderSanJiao.Checked.Background}" />
                        </Trigger>
                    </ControlTemplate.Triggers>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>
    
    <Style x:Key="AyTreeViewItemSimplyStyle" TargetType="{x:Type TreeViewItem}">
        <Setter Property="BorderThickness" Value="0,1" />
        <Setter Property="Padding" Value="0" />
        <Setter Property="Margin" Value="0"/>
        <Setter Property="IsExpanded" Value="{Binding IsExpanded,Mode=TwoWay}"></Setter>
        <Setter Property="IsSelected" Value="{Binding IsSelected,Mode=TwoWay}"></Setter>
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type TreeViewItem}">
                    <StackPanel>
                        <Grid >
                            <Border x:Name="Border" BorderThickness="{TemplateBinding BorderThickness}" Padding="{TemplateBinding Padding}" SnapsToDevicePixels="True">
                                <Grid Margin="{Binding FirstAyTreeViewItemPadding,RelativeSource={RelativeSource AncestorType={x:Type control:AyTreeView},Mode=FindAncestor}}">
                                    <Grid x:Name="tviLayout" >
                                        <Grid.ColumnDefinitions>
                                            <ColumnDefinition  Width="Auto"/>
                                            <ColumnDefinition Width="*"/>
                                        </Grid.ColumnDefinitions>
                                        <ToggleButton x:Name="Expander" Style="{StaticResource ExpandCollapseToggleStyle}" IsChecked="{Binding Path=IsExpanded,RelativeSource={RelativeSource TemplatedParent}}" ClickMode="Press" Width="Auto"
                                                      HorizontalAlignment="Left" Height="Auto" Margin="1,0,0,0" />
                                        <ContentPresenter x:Name="PART_Header" Grid.Column="1" ContentSource="Header" HorizontalAlignment="{TemplateBinding HorizontalContentAlignment}" SnapsToDevicePixels="{TemplateBinding SnapsToDevicePixels}" />
                                        <Path Grid.Column="1" x:Name="RightSJX" Visibility="Collapsed" Margin="0,0,-5,0" Opacity="{Binding SelectedRightSJXOpacity,RelativeSource={RelativeSource AncestorType={x:Type control:AyTreeView},Mode=FindAncestor}}" Data="F1M0.001,4.002L8.001,4.002 4,0.001z" Fill="{Binding SelectedRightSJXBrush,RelativeSource={RelativeSource AncestorType={x:Type control:AyTreeView},Mode=FindAncestor}}" Stretch="Uniform" RenderTransformOrigin="0.5,0.5"  VerticalAlignment="Center" Width="16" Height="26" HorizontalAlignment="Right">
                                            <Path.RenderTransform>
                                                <TransformGroup>
                                                    <ScaleTransform/>
                                                    <SkewTransform/>
                                                    <RotateTransform Angle="-90"/>
                                                    <TranslateTransform/>
                                                </TransformGroup>
                                            </Path.RenderTransform>
                                        </Path>
                                    </Grid>
                                </Grid>
                            </Border>
                        </Grid>
                        <ItemsPresenter x:Name="ItemsHost" Visibility="Collapsed"></ItemsPresenter>
                    </StackPanel>
                    <ControlTemplate.Triggers>
                        <DataTrigger  Binding="{Binding TreeViewAnimationIsOpen,RelativeSource={RelativeSource Mode=FindAncestor,AncestorType={x:Type control:AyTreeView}}}" Value="false">
                            <Setter Property="Margin" TargetName="tviLayout"  Value="{Binding Depth,Converter={StaticResource IndentConverter}}"/>
                        </DataTrigger>
                        <DataTrigger  Binding="{Binding TreeViewAnimationIsOpen,RelativeSource={RelativeSource Mode=FindAncestor,AncestorType={x:Type control:AyTreeView}}}" Value="true">
                            <Setter Property="Margin"  Value="0"/>
                        </DataTrigger>
                        <DataTrigger  Binding="{Binding IsExpanded}" Value="true">
                            <Setter TargetName="ItemsHost" Property="Visibility" Value="Visible" />
                        </DataTrigger>
                        <MultiDataTrigger>
                            <MultiDataTrigger.Conditions>
                                <Condition Binding="{Binding TreeViewAnimationIsOpen,RelativeSource={RelativeSource Mode=FindAncestor,AncestorType={x:Type control:AyTreeView}}}" Value="true"/>
                                <Condition Binding="{Binding ParentCategory.IsExpanded}" Value="true"/>
                            </MultiDataTrigger.Conditions>
                            <Setter Property="Padding" Value="{Binding Depth,Converter={StaticResource IndentConverter}}" />
                        </MultiDataTrigger>
            
                        <Trigger Property="HasItems" Value="False">
                            <Setter TargetName="Expander" Property="Visibility" Value="Hidden" />
                        </Trigger>
              
                        <Trigger Property="IsEnabled" Value="False"/>
                    </ControlTemplate.Triggers>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>
    <HierarchicalDataTemplate x:Key="TreeNodeTemplate" DataType="{x:Type control:AyTreeViewItemModel}" ItemsSource="{Binding Children}">
        <StackPanel Cursor="Hand" Orientation="Horizontal" Height="{Binding TreeViewItemHeight,RelativeSource={RelativeSource AncestorType={x:Type control:AyTreeView},Mode=FindAncestor}}" >
            <Grid VerticalAlignment="Center">
                <Image  x:Name="expand0" VerticalAlignment="Center" Source="{Binding Icon,Mode=TwoWay}" Visibility="Visible"
                       Width="{Binding IconWidth,Mode=TwoWay,RelativeSource={RelativeSource AncestorType={x:Type control:AyTreeView},Mode=FindAncestor}}" 
                       Height="{Binding IconHeight,Mode=TwoWay,RelativeSource={RelativeSource AncestorType={x:Type control:AyTreeView},Mode=FindAncestor}}"/>
                <Image x:Name="expand" VerticalAlignment="Center" Source="/OA.UI;component/SystemResources/Images/tree/folder_02.png"  Visibility="Collapsed"
                       Width="{Binding IconWidth,Mode=TwoWay,RelativeSource={RelativeSource AncestorType={x:Type control:AyTreeView},Mode=FindAncestor}}" 
                       Height="{Binding IconHeight,Mode=TwoWay,RelativeSource={RelativeSource AncestorType={x:Type control:AyTreeView},Mode=FindAncestor}}"/>
            </Grid>
            <TextBlock x:Name="textShow" Text="{Binding Text}" Margin="4,0,0,0" FontFamily="{Binding FontFamily,RelativeSource={RelativeSource AncestorType={x:Type control:AyTreeView},Mode=FindAncestor}}" 
                       FontStretch="{Binding FontStretch,RelativeSource={RelativeSource AncestorType={x:Type control:AyTreeView},Mode=FindAncestor}}"
                       FontWeight="{Binding FontWeight,RelativeSource={RelativeSource AncestorType={x:Type control:AyTreeView},Mode=FindAncestor}}"
                       Foreground="{Binding Foreground,RelativeSource={RelativeSource AncestorType={x:Type control:AyTreeView},Mode=FindAncestor}}" 
                       FontSize="{Binding FontSize,RelativeSource={RelativeSource AncestorType={x:Type control:AyTreeView},Mode=FindAncestor}}" VerticalAlignment="Center"/>
        </StackPanel>
        <HierarchicalDataTemplate.Triggers>
            <MultiDataTrigger>
                <MultiDataTrigger.Conditions>
                    <Condition Binding="{Binding RelativeSource={RelativeSource Mode=FindAncestor, AncestorType={x:Type TreeViewItem}}, Path=IsExpanded}"   Value="true"></Condition>
                    <Condition Binding="{Binding RelativeSource={RelativeSource Mode=FindAncestor, AncestorType={x:Type TreeViewItem}}, Path=DataContext.IsSpecParentNode}"   Value="True"></Condition>
                </MultiDataTrigger.Conditions>
                <!--<Setter TargetName="textShow" Property="Foreground" Value="{Binding HoverForeground,RelativeSource={RelativeSource AncestorType={x:Type control:AyTreeView},Mode=FindAncestor}}" />-->
                <Setter TargetName="expand" Property="Visibility" Value="Visible" />
                <Setter TargetName="expand0" Property="Visibility" Value="Collapsed" />
            </MultiDataTrigger>
            <MultiDataTrigger>
                <MultiDataTrigger.Conditions>
                    <Condition Binding="{Binding RelativeSource={RelativeSource Mode=FindAncestor, AncestorType={x:Type TreeViewItem}}, Path=IsExpanded}"   Value="False"></Condition>
                    <Condition Binding="{Binding   RelativeSource={RelativeSource Mode=FindAncestor, AncestorType={x:Type TreeViewItem}}, Path=IsMouseOver}"   Value="True"></Condition>
                </MultiDataTrigger.Conditions>
                <Setter TargetName="textShow" Property="Foreground" Value="{Binding HoverForeground,RelativeSource={RelativeSource AncestorType={x:Type control:AyTreeView},Mode=FindAncestor}}" />
            </MultiDataTrigger>
            <DataTrigger Binding="{Binding RelativeSource={RelativeSource Mode=FindAncestor, AncestorType={x:Type TreeViewItem}}, Path=IsSelected}"   Value="True">
                <Setter TargetName="textShow" Property="Foreground" Value="{Binding PressedForeground,RelativeSource={RelativeSource AncestorType={x:Type control:AyTreeView},Mode=FindAncestor}}" />    
            </DataTrigger>
        </HierarchicalDataTemplate.Triggers>
    </HierarchicalDataTemplate>
    <Style x:Key="{x:Type control:AyTreeView}" TargetType="{x:Type control:AyTreeView}">
        <Setter Property="HoverForeground" Value="{StaticResource AyTreeViewItem.Hover.Foreground}"/>
        <Setter Property="PressedForeground" Value="{StaticResource AyTreeViewItem.Pressed.Foreground}"/>
        <Setter Property="SelectedRightSJXBrush" Value="White"/>

        <Setter Property="ItemTemplate" Value="{DynamicResource TreeNodeTemplate}"/>
        <Setter Property="ItemContainerStyle" Value="{DynamicResource AyTreeViewItemSimplyStyle}"></Setter>
    </Style>


    <!--aaronyang aycombobox  2015-4-3 16:38:43 完成-->
    <Style x:Key="ComboBoxToggleButton" TargetType="{x:Type ToggleButton}">
        <Setter Property="OverridesDefaultStyle" Value="true"/>
        <Setter Property="IsTabStop" Value="false"/>
        <Setter Property="Focusable" Value="false"/>
        <Setter Property="ClickMode" Value="Press"/>
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type ToggleButton}">
                    <Border x:Name="templateRoot" Padding="5,0" BorderThickness="0" Background="{StaticResource AyComboBox.Static.Editable.Button.Background}" SnapsToDevicePixels="true">
                        <VisualStateManager.VisualStateGroups>
                            <VisualStateGroup x:Name="CommonStates">
                                <VisualStateGroup.Transitions>
                                    <VisualTransition GeneratedDuration="0:0:0.2">
                                        <VisualTransition.GeneratedEasingFunction>
                                            <CircleEase EasingMode="EaseOut"/>
                                        </VisualTransition.GeneratedEasingFunction>
                                    </VisualTransition>
                                </VisualStateGroup.Transitions>
                                <VisualState x:Name="Normal"/>
                                <VisualState x:Name="MouseOver">
                                    <Storyboard>
                                        <DoubleAnimationUsingKeyFrames Storyboard.TargetProperty="(UIElement.Opacity)" Storyboard.TargetName="templateRoot">
                                            <EasingDoubleKeyFrame KeyTime="0" Value="0.5"/>
                                        </DoubleAnimationUsingKeyFrames>
                                    </Storyboard>
                                </VisualState>
                            </VisualStateGroup>
                            <VisualStateGroup x:Name="CheckStates">
                                <VisualStateGroup.Transitions>
                                    <VisualTransition GeneratedDuration="0:0:0.2">
                                        <VisualTransition.GeneratedEasingFunction>
                                            <CircleEase EasingMode="EaseOut"/>
                                        </VisualTransition.GeneratedEasingFunction>
                                    </VisualTransition>
                                </VisualStateGroup.Transitions>
                                <VisualState x:Name="Checked">
                                    <Storyboard>
                                        <DoubleAnimationUsingKeyFrames Storyboard.TargetProperty="(UIElement.RenderTransform).(TransformGroup.Children)[3].(TranslateTransform.X)" Storyboard.TargetName="arrow">
                                            <EasingDoubleKeyFrame KeyTime="0" Value="2.5"/>
                                        </DoubleAnimationUsingKeyFrames>
                                    </Storyboard>
                                </VisualState>
                                <VisualState x:Name="Unchecked"/>
                                <VisualState x:Name="Indeterminate"/>
                            </VisualStateGroup>
                        </VisualStateManager.VisualStateGroups>
                        <Grid>
                            <Path x:Name="arrow" HorizontalAlignment="Right" VerticalAlignment="Center" Margin="0,0,2,0" Data="M0,0L516.999987125397,0 258.499987125397,318.999981067944z" Stretch="Uniform" Fill="{DynamicResource AyComboBox.Static.Arrow.Foreground}" Width="9" Height="9" RenderTransformOrigin="0.5,0.5">
                                <Path.RenderTransform>
                                    <TransformGroup>
                                        <ScaleTransform/>
                                        <SkewTransform/>
                                        <RotateTransform/>
                                        <TranslateTransform/>
                                    </TransformGroup>
                                </Path.RenderTransform>
                            </Path>
                        </Grid>
                    </Border>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>
    <ControlTemplate x:Key="ComboBoxTemplate" TargetType="{x:Type control:AyComboBox}">
        <StackPanel>
            <Popup x:Name="PART_Popup" AllowsTransparency="true" MinWidth="{Binding ActualWidth, ElementName=border}" MaxWidth="{Binding ActualWidth, ElementName=border}" IsOpen="{Binding IsDropDownOpen, RelativeSource={RelativeSource TemplatedParent}}" PopupAnimation="Slide" Placement="Bottom" >
                <Grid>
                    <Border x:Name="dropDownBorder"  BorderThickness="1,1,1,1" Background="{TemplateBinding Background}" BorderBrush="{TemplateBinding BorderBrush}"         MaxHeight="{TemplateBinding PanelMaxHeight}" MinHeight="{TemplateBinding PanelMinHeight}">
                        <ScrollViewer x:Name="DropDownScrollViewer" Margin="0">
                            <Grid x:Name="grid" RenderOptions.ClearTypeHint="Enabled" >
                                <Canvas x:Name="canvas" HorizontalAlignment="Left" Height="0" VerticalAlignment="Top" Width="0">
                                    <Rectangle x:Name="opaqueRect" Fill="{Binding Background, ElementName=dropDownBorder}" Height="{Binding ActualHeight, ElementName=dropDownBorder}" Width="{Binding ActualWidth, ElementName=dropDownBorder}"/>
                                </Canvas>
                                <ItemsPresenter Margin="-2,0" x:Name="ItemsPresenter" KeyboardNavigation.DirectionalNavigation="Contained" SnapsToDevicePixels="{TemplateBinding SnapsToDevicePixels}"/>
                            </Grid>
                        </ScrollViewer>
                    </Border>
                    <Border x:Name="dropDownBorder3"   BorderThickness="1,0,0,0" Margin="0,1,1,1" Height="{TemplateBinding ActualHeight,Converter={StaticResource AyComboboxHeightConverter1}}" Visibility="Visible" BorderBrush="{TemplateBinding Background}" HorizontalAlignment="Stretch" VerticalAlignment="Top" />
                    <Border x:Name="dropDownBorder2"  BorderThickness="0,1,0,0" Margin="1" BorderBrush="{TemplateBinding Background}" HorizontalAlignment="Stretch" VerticalAlignment="Stretch" Visibility="Collapsed"/>
                </Grid>
            </Popup>
            <Border x:Name="border" Background="{TemplateBinding Background}" BorderThickness="{TemplateBinding BorderThickness}" Padding="{TemplateBinding Padding}" BorderBrush="{TemplateBinding BorderBrush}" SnapsToDevicePixels="True"  Height="{TemplateBinding Height}" >
                <Grid x:Name="templateRoot" SnapsToDevicePixels="true">
                    <Grid.ColumnDefinitions>
                        <ColumnDefinition Width="Auto" x:Name="col0" MinWidth="6"/>
                        <ColumnDefinition Width="*"/>
                        <ColumnDefinition MinWidth="25" Width="0"/>
                    </Grid.ColumnDefinitions>
                    <!--下拉框-->
                    <Image Source="{TemplateBinding AyComboBoxIco}" Width="16" Height="16" x:Name="cboIcon" VerticalAlignment="Center" Margin="4,0"  Grid.Column="0" Visibility="{TemplateBinding IcoVisibility}" />
                    <!--右侧下拉按钮-->
                    <ToggleButton  x:Name="toggleButton"  Grid.ColumnSpan="3"  HorizontalAlignment="Stretch" VerticalAlignment="Stretch" IsChecked="{Binding IsDropDownOpen, Mode=TwoWay, RelativeSource={RelativeSource TemplatedParent}}" Margin="0,0,0,0" Style="{StaticResource ComboBoxToggleButton}"/>
                    <ContentPresenter x:Name="contentPresenter" ContentTemplate="{TemplateBinding SelectionBoxItemTemplate}" Grid.Column="1" ContentTemplateSelector="{TemplateBinding ItemTemplateSelector}" Content="{TemplateBinding SelectionBoxItem}" ContentStringFormat="{TemplateBinding SelectionBoxItemStringFormat}" HorizontalAlignment="{TemplateBinding HorizontalContentAlignment}" IsHitTestVisible="false" Margin="{TemplateBinding Padding}" SnapsToDevicePixels="true" VerticalAlignment="Center"/>
                </Grid>
            </Border>
        </StackPanel>
        <ControlTemplate.Triggers>
            <DataTrigger Binding="{Binding Placement, ElementName=PART_Popup}" Value="Top">
                <Setter Property="BorderThickness" TargetName="dropDownBorder" Value="1,1,1,0"/>
                <Setter Property="BorderThickness" TargetName="dropDownBorder2" Value="0,0,0,1"/>
                <Setter Property="VerticalOffset" TargetName="PART_Popup" Value="2"/>
                <Setter Property="HorizontalOffset" TargetName="PART_Popup" Value="0"/>
                <Setter Property="Margin" TargetName="DropDownScrollViewer" Value="0,0,0,1"/>
                <Setter Property="Visibility" TargetName="dropDownBorder2" Value="Visible"/>
                <Setter Property="Visibility" TargetName="dropDownBorder3" Value="Collapsed"/>
            </DataTrigger>
            <DataTrigger Binding="{Binding Placement, ElementName=PART_Popup}" Value="Bottom">
                <Setter Property="BorderThickness" TargetName="dropDownBorder" Value="1,0,1,1"/>
                <Setter Property="BorderThickness" TargetName="dropDownBorder2" Value="0,1,0,0"/>
                <Setter Property="VerticalOffset" TargetName="PART_Popup" Value="-2"/>
                <Setter Property="HorizontalOffset" TargetName="PART_Popup" Value="0"/>
                <Setter Property="Margin" TargetName="DropDownScrollViewer" Value="0,1,0,0"/>
                <Setter Property="Visibility" TargetName="dropDownBorder2" Value="Visible"/>
                <Setter Property="Visibility" TargetName="dropDownBorder3" Value="Collapsed"/>
            </DataTrigger>
            <DataTrigger Binding="{Binding Placement, ElementName=PART_Popup}" Value="Right">
                <Setter Property="HorizontalOffset" TargetName="PART_Popup" Value="-2"/>
                <Setter Property="VerticalOffset" TargetName="PART_Popup" Value="0"/>
                <Setter Property="BorderThickness" TargetName="dropDownBorder" Value="1"/>
                <Setter Property="Visibility" TargetName="dropDownBorder2" Value="Collapsed"/>
                <Setter Property="Margin" TargetName="dropDownBorder3" Value="0,1,1,1"/>
                <Setter Property="BorderThickness" TargetName="dropDownBorder3" Value="1,0,0,0"/>
                <Setter Property="Visibility" TargetName="dropDownBorder3" Value="Visible"/>
                <Setter Property="Margin" TargetName="DropDownScrollViewer" Value="0"/>
            </DataTrigger>
            <DataTrigger Binding="{Binding Placement, ElementName=PART_Popup}" Value="Left">
                <Setter Property="HorizontalOffset" TargetName="PART_Popup" Value="2"/>
                <Setter Property="VerticalOffset" TargetName="PART_Popup" Value="0"/>
                <Setter Property="BorderThickness" TargetName="dropDownBorder" Value="1"/>
                <Setter Property="Visibility" TargetName="dropDownBorder2" Value="Collapsed"/>
                <Setter Property="Margin" TargetName="dropDownBorder3" Value="1,1,0,1"/>
                <Setter Property="BorderThickness" TargetName="dropDownBorder3" Value="0,0,1,0"/>
                <Setter Property="Visibility" TargetName="dropDownBorder3" Value="Visible"/>
                <Setter Property="Margin" TargetName="DropDownScrollViewer" Value="0"/>
            </DataTrigger>
            <DataTrigger Binding="{Binding Visibility, ElementName=cboIcon}" Value="Visible">
                <Setter Property="Width" TargetName="col0" Value="24"/>
            </DataTrigger>
            <Trigger Property="IsEnabled" Value="false">
                <Setter Property="Opacity" TargetName="border" Value="0.56"/>
            </Trigger>
            <DataTrigger Binding="{Binding IsOpen, ElementName=PART_Popup}" Value="true">
                <!--<Setter Property="BorderThickness" Value="1,1,1,1"/>-->
            </DataTrigger>
            <Trigger Property="IsKeyboardFocusWithin" Value="true">
                <!--<Setter Property="Foreground" Value="White"/>-->
                <!--<Setter Property="IsOpen" Value="true" TargetName="PART_Popup" />-->
            </Trigger>
            <Trigger Property="HasDropShadow" SourceName="PART_Popup" Value="true">
                <!--<Setter Property="Margin" TargetName="shadow" Value="0,0,5,5"/> <Setter Property="Color" TargetName="shadow" Value="#71000000"/>-->
            </Trigger>
            <Trigger Property="HasItems" Value="false">
                <Setter Property="Height" TargetName="dropDownBorder" Value="20"/>
            </Trigger>
            <MultiTrigger>
                <MultiTrigger.Conditions>
                    <Condition Property="IsGrouping" Value="true"/>
                    <!--<Condition Property="VirtualizingPanel.IsVirtualizingWhenGrouping" Value="false"/>-->
                </MultiTrigger.Conditions>
                <Setter Property="ScrollViewer.CanContentScroll" Value="false"/>
            </MultiTrigger>
            <Trigger Property="ScrollViewer.CanContentScroll" SourceName="DropDownScrollViewer" Value="false">
                <Setter Property="Canvas.Top" TargetName="opaqueRect" Value="{Binding VerticalOffset, ElementName=DropDownScrollViewer}"/>
                <Setter Property="Canvas.Left" TargetName="opaqueRect" Value="{Binding HorizontalOffset, ElementName=DropDownScrollViewer}"/>
            </Trigger>
        </ControlTemplate.Triggers>
    </ControlTemplate>
    <ControlTemplate x:Key="ComboBoxTouTemplate" TargetType="{x:Type control:AyComboBox}">
        <StackPanel>
            <Popup x:Name="PART_Popup" AllowsTransparency="true" MinWidth="{Binding ActualWidth, ElementName=border}" MaxWidth="{Binding ActualWidth, ElementName=border}" IsOpen="{Binding IsDropDownOpen, RelativeSource={RelativeSource TemplatedParent}}" PopupAnimation="Slide" Placement="Left" >
                <Grid>
                    <Border x:Name="dropDownBorder"  BorderThickness="1,1,1,1" Background="{TemplateBinding Background}" BorderBrush="{TemplateBinding BorderBrush}"         MaxHeight="{TemplateBinding PanelMaxHeight}" MinHeight="{TemplateBinding PanelMinHeight}">
                        <ScrollViewer  x:Name="DropDownScrollViewer" Margin="0">
                            <Grid x:Name="grid" RenderOptions.ClearTypeHint="Enabled" >
                                <Canvas x:Name="canvas" HorizontalAlignment="Left" Height="0" VerticalAlignment="Top" Width="0">
                                    <Rectangle x:Name="opaqueRect" Fill="{Binding Background, ElementName=dropDownBorder}" Height="{Binding ActualHeight, ElementName=dropDownBorder}" Width="{Binding ActualWidth, ElementName=dropDownBorder}"/>
                                </Canvas>
                                <ItemsPresenter Margin="-2,0" x:Name="ItemsPresenter" KeyboardNavigation.DirectionalNavigation="Contained" SnapsToDevicePixels="{TemplateBinding SnapsToDevicePixels}"/>
                            </Grid>
                        </ScrollViewer>
                    </Border>
                </Grid>
            </Popup>
            <Border x:Name="border" Background="{TemplateBinding Background}" BorderThickness="{TemplateBinding BorderThickness}" Padding="{TemplateBinding Padding}" BorderBrush="{TemplateBinding BorderBrush}" SnapsToDevicePixels="True"  Height="{TemplateBinding Height}" >
                <Grid x:Name="templateRoot" SnapsToDevicePixels="true">
                    <Grid.ColumnDefinitions>
                        <ColumnDefinition Width="Auto" x:Name="col0" MinWidth="6"/>
                        <ColumnDefinition Width="*"/>
                        <ColumnDefinition MinWidth="25" Width="0"/>
                    </Grid.ColumnDefinitions>
                    <!--下拉框-->
                    <Image Source="{TemplateBinding AyComboBoxIco}" Width="16" Height="16" x:Name="cboIcon" VerticalAlignment="Center" Margin="4,0"  Grid.Column="0" Visibility="{TemplateBinding IcoVisibility}" />
                    <!--右侧下拉按钮-->
                    <ToggleButton  x:Name="toggleButton"  Grid.ColumnSpan="3"  HorizontalAlignment="Stretch" VerticalAlignment="Stretch" IsChecked="{Binding IsDropDownOpen, Mode=TwoWay, RelativeSource={RelativeSource TemplatedParent}}" Margin="0,0,0,0" Style="{StaticResource ComboBoxToggleButton}"/>
                    <ContentPresenter x:Name="contentPresenter" ContentTemplate="{TemplateBinding SelectionBoxItemTemplate}" Grid.Column="1" ContentTemplateSelector="{TemplateBinding ItemTemplateSelector}" Content="{TemplateBinding SelectionBoxItem}" ContentStringFormat="{TemplateBinding SelectionBoxItemStringFormat}" HorizontalAlignment="{TemplateBinding HorizontalContentAlignment}" IsHitTestVisible="false" Margin="{TemplateBinding Padding}" SnapsToDevicePixels="true" VerticalAlignment="Center"/>
                </Grid>
            </Border>
        </StackPanel>
        <ControlTemplate.Triggers>
            <DataTrigger Binding="{Binding Placement, ElementName=PART_Popup}" Value="Top">
                <Setter Property="HorizontalOffset" TargetName="PART_Popup" Value="0"/>
                <Setter Property="VerticalOffset" TargetName="PART_Popup" Value="-1"/>
            </DataTrigger>
            <DataTrigger Binding="{Binding Placement, ElementName=PART_Popup}" Value="Bottom">
                <Setter Property="HorizontalOffset" TargetName="PART_Popup" Value="0"/>
                <Setter Property="VerticalOffset" TargetName="PART_Popup" Value="1"/>
            </DataTrigger>
            <DataTrigger Binding="{Binding Placement, ElementName=PART_Popup}" Value="Right">
                <Setter Property="HorizontalOffset" TargetName="PART_Popup" Value="1"/>
                <Setter Property="VerticalOffset" TargetName="PART_Popup" Value="0"/>
            </DataTrigger>
            <DataTrigger Binding="{Binding Placement, ElementName=PART_Popup}" Value="Left">
                <Setter Property="HorizontalOffset" TargetName="PART_Popup" Value="-1"/>
                <Setter Property="VerticalOffset" TargetName="PART_Popup" Value="0"/>
            </DataTrigger>
            <DataTrigger Binding="{Binding Visibility, ElementName=cboIcon}" Value="Visible">
                <Setter Property="Width" TargetName="col0" Value="24"/>
            </DataTrigger>
            <Trigger Property="IsEnabled" Value="false">
                <Setter Property="Opacity" TargetName="border" Value="0.56"/>
            </Trigger>
            <DataTrigger Binding="{Binding IsOpen, ElementName=PART_Popup}" Value="true"></DataTrigger>
            <Trigger Property="HasItems" Value="false">
                <Setter Property="Height" TargetName="dropDownBorder" Value="0"/>
            </Trigger>
            <MultiTrigger>
                <MultiTrigger.Conditions>
                    <Condition Property="IsGrouping" Value="true"/>
                    <!--<Condition Property="VirtualizingPanel.IsVirtualizingWhenGrouping" Value="false"/>-->
                </MultiTrigger.Conditions>
                <Setter Property="ScrollViewer.CanContentScroll" Value="false"/>
            </MultiTrigger>
            <Trigger Property="ScrollViewer.CanContentScroll" SourceName="DropDownScrollViewer" Value="false">
                <Setter Property="Canvas.Top" TargetName="opaqueRect" Value="{Binding VerticalOffset, ElementName=DropDownScrollViewer}"/>
                <Setter Property="Canvas.Left" TargetName="opaqueRect" Value="{Binding HorizontalOffset, ElementName=DropDownScrollViewer}"/>
            </Trigger>
        </ControlTemplate.Triggers>
    </ControlTemplate>
    <Style x:Key="ComboBoxEditableTextBox" TargetType="{x:Type TextBox}">
        <Setter Property="OverridesDefaultStyle" Value="true"/>
        <Setter Property="AllowDrop" Value="true"/>
        <Setter Property="MinWidth" Value="0"/>
        <Setter Property="MinHeight" Value="0"/>
        <Setter Property="FocusVisualStyle" Value="{x:Null}"/>
        <Setter Property="ScrollViewer.PanningMode" Value="VerticalFirst"/>
        <Setter Property="Stylus.IsFlicksEnabled" Value="False"/>
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type TextBox}">
                    <ScrollViewer  x:Name="PART_ContentHost" Background="Transparent" VerticalContentAlignment="Center" Focusable="false" HorizontalScrollBarVisibility="Hidden" VerticalScrollBarVisibility="Hidden"/>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>
    <ControlTemplate x:Key="ComboBoxEditableTemplate" TargetType="{x:Type control:AyComboBox}">
        <StackPanel>
            <Popup x:Name="PART_Popup" AllowsTransparency="true" MinWidth="{Binding ActualWidth, ElementName=border}" MaxWidth="{Binding ActualWidth, ElementName=border}" IsOpen="{Binding IsDropDownOpen, RelativeSource={RelativeSource TemplatedParent}}" PopupAnimation="Slide" Placement="Bottom" >
                <Grid>
                    <Border x:Name="dropDownBorder"  BorderThickness="1,1,1,1" Background="{TemplateBinding Background}" BorderBrush="{TemplateBinding BorderBrush}"         MaxHeight="{TemplateBinding PanelMaxHeight}" MinHeight="{TemplateBinding PanelMinHeight}">
                        <ScrollViewer x:Name="DropDownScrollViewer" Margin="0">
                            <Grid x:Name="grid" RenderOptions.ClearTypeHint="Enabled" >
                                <Canvas x:Name="canvas" HorizontalAlignment="Left" Height="0" VerticalAlignment="Top" Width="0">
                                    <Rectangle x:Name="opaqueRect" Fill="{Binding Background, ElementName=dropDownBorder}" Height="{Binding ActualHeight, ElementName=dropDownBorder}" Width="{Binding ActualWidth, ElementName=dropDownBorder}"/>
                                </Canvas>
                                <ItemsPresenter Margin="-2,0" x:Name="ItemsPresenter" KeyboardNavigation.DirectionalNavigation="Contained" SnapsToDevicePixels="{TemplateBinding SnapsToDevicePixels}"/>
                            </Grid>
                        </ScrollViewer>
                    </Border>
                    <Border x:Name="dropDownBorder3"   BorderThickness="1,0,0,0" Margin="0,1,1,1" Height="{TemplateBinding ActualHeight,Converter={StaticResource AyComboboxHeightConverter1}}" Visibility="Visible" BorderBrush="{TemplateBinding Background}" HorizontalAlignment="Stretch" VerticalAlignment="Top" />
                    <Border x:Name="dropDownBorder2"  BorderThickness="0,1,0,0" Margin="1" BorderBrush="{TemplateBinding Background}" HorizontalAlignment="Stretch" VerticalAlignment="Stretch" Visibility="Collapsed"/>
                </Grid>
            </Popup>
            <Border x:Name="border" Background="{TemplateBinding Background}" BorderThickness="{TemplateBinding BorderThickness}" Padding="{TemplateBinding Padding}" BorderBrush="{TemplateBinding BorderBrush}" SnapsToDevicePixels="True"  Height="{TemplateBinding Height}" >
                <Grid x:Name="templateRoot" SnapsToDevicePixels="true">
                    <Grid.ColumnDefinitions>
                        <ColumnDefinition Width="Auto" x:Name="col0" MinWidth="3"/>
                        <ColumnDefinition Width="*"/>
                        <ColumnDefinition MinWidth="25" Width="25"/>
                    </Grid.ColumnDefinitions>
                    <!--下拉框-->
                    <Image Source="{TemplateBinding AyComboBoxIco}" Width="16" Height="16" x:Name="cboIcon" VerticalAlignment="Center"  Margin="4,0"  Grid.Column="0" Visibility="{TemplateBinding IcoVisibility}" />
                    <!--右侧下拉按钮-->
                    <ToggleButton x:Name="toggleButton"  Grid.Column="2" HorizontalAlignment="Right" VerticalAlignment="Stretch" IsChecked="{Binding IsDropDownOpen, Mode=TwoWay, RelativeSource={RelativeSource TemplatedParent}}" Margin="0,0,0,0" Style="{StaticResource ComboBoxToggleButton}"/>
                    <TextBox  x:Name="PART_EditableTextBox" Grid.Column="1" HorizontalContentAlignment="{TemplateBinding HorizontalContentAlignment}" IsReadOnly="{Binding IsReadOnly, RelativeSource={RelativeSource TemplatedParent}}" Style="{StaticResource ComboBoxEditableTextBox}" VerticalContentAlignment="Center"/>
                </Grid>
            </Border>
        </StackPanel>
        <ControlTemplate.Triggers>
            <DataTrigger Binding="{Binding Placement, ElementName=PART_Popup}" Value="Top">
                <Setter Property="BorderThickness" TargetName="dropDownBorder" Value="1,1,1,0"/>
                <Setter Property="BorderThickness" TargetName="dropDownBorder2" Value="0,0,0,1"/>
                <Setter Property="VerticalOffset" TargetName="PART_Popup" Value="2"/>
                <Setter Property="HorizontalOffset" TargetName="PART_Popup" Value="0"/>
                <Setter Property="Margin" TargetName="DropDownScrollViewer" Value="0,0,0,1"/>
                <Setter Property="Visibility" TargetName="dropDownBorder2" Value="Visible"/>
                <Setter Property="Visibility" TargetName="dropDownBorder3" Value="Collapsed"/>
            </DataTrigger>
            <DataTrigger Binding="{Binding Placement, ElementName=PART_Popup}" Value="Bottom">
                <Setter Property="BorderThickness" TargetName="dropDownBorder" Value="1,0,1,1"/>
                <Setter Property="BorderThickness" TargetName="dropDownBorder2" Value="0,1,0,0"/>
                <Setter Property="VerticalOffset" TargetName="PART_Popup" Value="-2"/>
                <Setter Property="HorizontalOffset" TargetName="PART_Popup" Value="0"/>
                <Setter Property="Margin" TargetName="DropDownScrollViewer" Value="0,1,0,0"/>
                <Setter Property="Visibility" TargetName="dropDownBorder2" Value="Visible"/>
                <Setter Property="Visibility" TargetName="dropDownBorder3" Value="Collapsed"/>
            </DataTrigger>
            <DataTrigger Binding="{Binding Placement, ElementName=PART_Popup}" Value="Right">
                <Setter Property="HorizontalOffset" TargetName="PART_Popup" Value="-2"/>
                <Setter Property="VerticalOffset" TargetName="PART_Popup" Value="0"/>
                <Setter Property="BorderThickness" TargetName="dropDownBorder" Value="1"/>
                <Setter Property="Visibility" TargetName="dropDownBorder2" Value="Collapsed"/>
                <Setter Property="Margin" TargetName="dropDownBorder3" Value="0,1,1,1"/>
                <Setter Property="BorderThickness" TargetName="dropDownBorder3" Value="1,0,0,0"/>
                <Setter Property="Visibility" TargetName="dropDownBorder3" Value="Visible"/>
                <Setter Property="Margin" TargetName="DropDownScrollViewer" Value="0"/>
            </DataTrigger>
            <DataTrigger Binding="{Binding Placement, ElementName=PART_Popup}" Value="Left">
                <Setter Property="HorizontalOffset" TargetName="PART_Popup" Value="2"/>
                <Setter Property="VerticalOffset" TargetName="PART_Popup" Value="0"/>
                <Setter Property="BorderThickness" TargetName="dropDownBorder" Value="1"/>
                <Setter Property="Visibility" TargetName="dropDownBorder2" Value="Collapsed"/>
                <Setter Property="Margin" TargetName="dropDownBorder3" Value="1,1,0,1"/>
                <Setter Property="BorderThickness" TargetName="dropDownBorder3" Value="0,0,1,0"/>
                <Setter Property="Visibility" TargetName="dropDownBorder3" Value="Visible"/>
                <Setter Property="Margin" TargetName="DropDownScrollViewer" Value="0"/>
            </DataTrigger>
            <DataTrigger Binding="{Binding Visibility, ElementName=cboIcon}" Value="Visible">
                <Setter Property="Width" TargetName="col0" Value="24"/>
            </DataTrigger>
            <Trigger Property="IsEnabled" Value="false">
                <Setter Property="Opacity" TargetName="border" Value="0.56"/>
            </Trigger>
            <Trigger Property="IsKeyboardFocusWithin" Value="true">
                <Setter Property="IsDropDownOpen" Value="true" />
            </Trigger>
            <Trigger Property="HasItems" Value="false">
                <Setter Property="Height" TargetName="dropDownBorder" Value="0"/>
            </Trigger>
            <MultiTrigger>
                <MultiTrigger.Conditions>
                    <Condition Property="IsGrouping" Value="true"/>
                    <!--<Condition Property="VirtualizingPanel.IsVirtualizingWhenGrouping" Value="false"/>-->
                </MultiTrigger.Conditions>
                <Setter Property="ScrollViewer.CanContentScroll" Value="false"/>
            </MultiTrigger>
            <Trigger Property="ScrollViewer.CanContentScroll" SourceName="DropDownScrollViewer" Value="false">
                <Setter Property="Canvas.Top" TargetName="opaqueRect" Value="{Binding VerticalOffset, ElementName=DropDownScrollViewer}"/>
                <Setter Property="Canvas.Left" TargetName="opaqueRect" Value="{Binding HorizontalOffset, ElementName=DropDownScrollViewer}"/>
            </Trigger>
        </ControlTemplate.Triggers>
    </ControlTemplate>
    <ControlTemplate x:Key="ComboBoxEditableTouTemplate" TargetType="{x:Type control:AyComboBox}">
        <StackPanel>
            <Popup x:Name="PART_Popup" AllowsTransparency="true" MinWidth="{Binding ActualWidth, ElementName=border}" MaxWidth="{Binding ActualWidth, ElementName=border}" IsOpen="{Binding IsDropDownOpen, RelativeSource={RelativeSource TemplatedParent}}" PopupAnimation="Slide" Placement="Left" >
                <Grid>
                    <Border x:Name="dropDownBorder"  BorderThickness="1,1,1,1" Background="{TemplateBinding Background}" BorderBrush="{TemplateBinding BorderBrush}"         MaxHeight="{TemplateBinding PanelMaxHeight}" MinHeight="{TemplateBinding PanelMinHeight}">
                        <ScrollViewer x:Name="DropDownScrollViewer" Margin="0" >
                            <Grid x:Name="grid" RenderOptions.ClearTypeHint="Enabled" >
                                <Canvas x:Name="canvas" HorizontalAlignment="Left" Height="0" VerticalAlignment="Top" Width="0">
                                    <Rectangle x:Name="opaqueRect" Fill="{Binding Background, ElementName=dropDownBorder}" Height="{Binding ActualHeight, ElementName=dropDownBorder}" Width="{Binding ActualWidth, ElementName=dropDownBorder}"/>
                                </Canvas>
                                <ItemsPresenter Margin="-2,0" x:Name="ItemsPresenter" KeyboardNavigation.DirectionalNavigation="Contained" SnapsToDevicePixels="{TemplateBinding SnapsToDevicePixels}"/>
                            </Grid>
                        </ScrollViewer>
                    </Border>
                </Grid>
            </Popup>
            <Border x:Name="border" Background="{TemplateBinding Background}" BorderThickness="{TemplateBinding BorderThickness}" Padding="{TemplateBinding Padding}" BorderBrush="{TemplateBinding BorderBrush}" SnapsToDevicePixels="True"  Height="{TemplateBinding Height}" >
                <Grid x:Name="templateRoot" SnapsToDevicePixels="true">
                    <Grid.ColumnDefinitions>
                        <ColumnDefinition Width="Auto" x:Name="col0" MinWidth="3"/>
                        <ColumnDefinition Width="*"/>
                        <ColumnDefinition MinWidth="25" Width="25"/>
                    </Grid.ColumnDefinitions>
                    <!--下拉框-->
                    <Image Source="{TemplateBinding AyComboBoxIco}" Width="16" Height="16" x:Name="cboIcon" VerticalAlignment="Center" Margin="4,0"  Grid.Column="0" Visibility="{TemplateBinding IcoVisibility}" />
                    <!--右侧下拉按钮-->
                    <ToggleButton x:Name="toggleButton"  Grid.Column="2" HorizontalAlignment="Right" VerticalAlignment="Stretch" IsChecked="{Binding IsDropDownOpen, Mode=TwoWay, RelativeSource={RelativeSource TemplatedParent}}" Margin="0,0,0,0" Style="{StaticResource ComboBoxToggleButton}"/>
                    <TextBox  x:Name="PART_EditableTextBox" Grid.Column="1" HorizontalContentAlignment="{TemplateBinding HorizontalContentAlignment}" IsReadOnly="{Binding IsReadOnly, RelativeSource={RelativeSource TemplatedParent}}" Style="{StaticResource ComboBoxEditableTextBox}" VerticalContentAlignment="Center"/>
                </Grid>
            </Border>
        </StackPanel>
        <ControlTemplate.Triggers>
            <Trigger Property="IsKeyboardFocusWithin" Value="true">
                <Setter Property="IsDropDownOpen" Value="true" />
            </Trigger>
            <DataTrigger Binding="{Binding Placement, ElementName=PART_Popup}" Value="Top">
                <Setter Property="HorizontalOffset" TargetName="PART_Popup" Value="0"/>
                <Setter Property="VerticalOffset" TargetName="PART_Popup" Value="-1"/>
            </DataTrigger>
            <DataTrigger Binding="{Binding Placement, ElementName=PART_Popup}" Value="Bottom">
                <Setter Property="HorizontalOffset" TargetName="PART_Popup" Value="0"/>
                <Setter Property="VerticalOffset" TargetName="PART_Popup" Value="1"/>
            </DataTrigger>
            <DataTrigger Binding="{Binding Placement, ElementName=PART_Popup}" Value="Right">
                <Setter Property="HorizontalOffset" TargetName="PART_Popup" Value="1"/>
                <Setter Property="VerticalOffset" TargetName="PART_Popup" Value="0"/>
            </DataTrigger>
            <DataTrigger Binding="{Binding Placement, ElementName=PART_Popup}" Value="Left">
                <Setter Property="HorizontalOffset" TargetName="PART_Popup" Value="-1"/>
                <Setter Property="VerticalOffset" TargetName="PART_Popup" Value="0"/>
            </DataTrigger>
            <DataTrigger Binding="{Binding Visibility, ElementName=cboIcon}" Value="Visible">
                <Setter Property="Width" TargetName="col0" Value="24"/>
            </DataTrigger>
            <Trigger Property="IsEnabled" Value="false">
                <Setter Property="Opacity" TargetName="border" Value="0.56"/>
            </Trigger>
            <DataTrigger Binding="{Binding IsOpen, ElementName=PART_Popup}" Value="true"></DataTrigger>
            <Trigger Property="HasItems" Value="false">
                <Setter Property="Height" TargetName="dropDownBorder" Value="0"/>
            </Trigger>
            <MultiTrigger>
                <MultiTrigger.Conditions>
                    <Condition Property="IsGrouping" Value="true"/>
                    <!--<Condition Property="VirtualizingPanel.IsVirtualizingWhenGrouping" Value="false"/>-->
                </MultiTrigger.Conditions>
                <Setter Property="ScrollViewer.CanContentScroll" Value="false"/>
            </MultiTrigger>
            <Trigger Property="ScrollViewer.CanContentScroll" SourceName="DropDownScrollViewer" Value="false">
                <Setter Property="Canvas.Top" TargetName="opaqueRect" Value="{Binding VerticalOffset, ElementName=DropDownScrollViewer}"/>
                <Setter Property="Canvas.Left" TargetName="opaqueRect" Value="{Binding HorizontalOffset, ElementName=DropDownScrollViewer}"/>
            </Trigger>
        </ControlTemplate.Triggers>
    </ControlTemplate>
    <Style x:Key="{x:Type control:AyComboBox}" TargetType="{x:Type control:AyComboBox}">
        <Setter Property="FocusVisualStyle" Value="{x:Null}"/>
        <Setter Property="BorderThickness" Value="1"/>
        <Setter Property="ScrollViewer.HorizontalScrollBarVisibility" Value="Disabled"/>
        <Setter Property="ScrollViewer.VerticalScrollBarVisibility" Value="Auto"/>
        <Setter Property="Padding" Value="0"/>
        <Setter Property="Height" Value="26"/>
        <Setter Property="Background" Value="White"/>
        <Setter Property="BorderBrush" Value="{StaticResource AyComboBox.Static.Border}"/>
        <Setter Property="ScrollViewer.CanContentScroll" Value="true"/>
        <Setter Property="ScrollViewer.PanningMode" Value="Both"/>
        <Setter Property="Stylus.IsFlicksEnabled" Value="False"/>
        <Setter Property="VerticalContentAlignment" Value="Center"/>
        <Setter Property="Template" Value="{StaticResource ComboBoxTemplate}"/>
        <Setter Property="IsTextSearchEnabled" Value="True"/>
        <Setter Property="IsSynchronizedWithCurrentItem" Value="True"/>
        <Setter Property="ItemsPanel">
            <Setter.Value>
                <ItemsPanelTemplate>
                    <VirtualizingStackPanel></VirtualizingStackPanel>
                </ItemsPanelTemplate>
            </Setter.Value>
        </Setter>
        <Style.Triggers>
            <MultiTrigger>
                <MultiTrigger.Conditions>
                    <Condition  Property="IsEditable" Value="false"></Condition>
                    <Condition  Property="IsTransparentBackground" Value="false"></Condition>
                </MultiTrigger.Conditions>
                <Setter Property="Template" Value="{StaticResource ComboBoxTemplate}"/>
            </MultiTrigger>
            <MultiTrigger>
                <MultiTrigger.Conditions>
                    <Condition  Property="IsEditable" Value="false"></Condition>
                    <Condition  Property="IsTransparentBackground" Value="true"></Condition>
                </MultiTrigger.Conditions>
                <Setter Property="Template" Value="{StaticResource ComboBoxTouTemplate}"/>
            </MultiTrigger>
            <MultiTrigger>
                <MultiTrigger.Conditions>
                    <Condition  Property="IsEditable" Value="true"></Condition>
                    <Condition  Property="IsTransparentBackground" Value="false"></Condition>
                </MultiTrigger.Conditions>
                <Setter Property="IsTabStop" Value="false"/>
                <Setter Property="Template" Value="{StaticResource ComboBoxEditableTemplate}"/>
            </MultiTrigger>
            <MultiTrigger>
                <MultiTrigger.Conditions>
                    <Condition  Property="IsEditable" Value="true"></Condition>
                    <Condition  Property="IsTransparentBackground" Value="true"></Condition>
                </MultiTrigger.Conditions>
                <Setter Property="IsTabStop" Value="false"/>
                <Setter Property="Template" Value="{StaticResource ComboBoxEditableTouTemplate}"/>
            </MultiTrigger>
        </Style.Triggers>
    </Style>
    <Style x:Key="{x:Type ComboBoxItem}" TargetType="{x:Type ComboBoxItem}">
        <Setter Property="SnapsToDevicePixels" Value="True"/>
        <Setter Property="Padding" Value="4,0"/>
        <Setter Property="Height" Value="26"/>
        <Setter Property="HorizontalContentAlignment" Value="{Binding HorizontalContentAlignment, RelativeSource={RelativeSource AncestorType={x:Type ItemsControl}}}"/>
        <Setter Property="VerticalContentAlignment" Value="center"/>
        <Setter Property="Background" Value="Transparent"/>
        <Setter Property="BorderBrush" Value="Transparent"/>
        <Setter Property="BorderThickness" Value="0"/>
        <Setter Property="FocusVisualStyle" Value="{x:Null}"/>
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type ComboBoxItem}">
                    <Border  x:Name="Bd" BorderBrush="{TemplateBinding BorderBrush}" Margin="2,0" BorderThickness="{TemplateBinding BorderThickness}" Background="{TemplateBinding Background}" Padding="{TemplateBinding Padding}" SnapsToDevicePixels="true" Width="{Binding Width, RelativeSource={RelativeSource FindAncestor, AncestorType={x:Type ComboBox},AncestorLevel=1}}">
                        <ContentPresenter HorizontalAlignment="{TemplateBinding HorizontalContentAlignment}" SnapsToDevicePixels="{TemplateBinding SnapsToDevicePixels}" VerticalAlignment="{TemplateBinding VerticalContentAlignment}"/>
                    </Border>
                    <ControlTemplate.Triggers>
                        <Trigger Property="IsEnabled" Value="False">
                            <Setter Property="TextElement.Foreground" TargetName="Bd" Value="#DFDFDF"/>
                        </Trigger>
                        <MultiTrigger>
                            <MultiTrigger.Conditions>
                                <Condition Property="IsSelected" Value="False"/>
                                <Condition Property="IsMouseOver" Value="True"/>
                            </MultiTrigger.Conditions>
                            <Setter Property="Background" TargetName="Bd" Value="{StaticResource ComboBoxItem.ItemsviewHover.Background}"/>
                            <Setter Property="Foreground"  Value="white"/>
                        </MultiTrigger>
                        <MultiTrigger>
                            <MultiTrigger.Conditions>
                                <Condition Property="IsSelected" Value="True"/>
                                <Condition Property="IsMouseOver" Value="False"/>
                                <Condition Property="IsKeyboardFocused" Value="True"/>
                            </MultiTrigger.Conditions>
                            <Setter Property="Background" TargetName="Bd" Value="{StaticResource ComboBoxItem.ItemsviewSelected.Background}"/>
                            <Setter Property="Foreground"  Value="white"/>
                        </MultiTrigger>
                        <MultiTrigger>
                            <MultiTrigger.Conditions>
                                <Condition Property="IsSelected" Value="True"/>
                                <Condition Property="IsMouseOver" Value="True"/>
                            </MultiTrigger.Conditions>
                            <Setter Property="Background" TargetName="Bd" Value="{StaticResource ComboBoxItem.ItemsviewSelectedHover.Background}"/>
                            <Setter Property="Foreground"  Value="white"/>
                        </MultiTrigger>
                        <MultiTrigger>
                            <MultiTrigger.Conditions>
                                <Condition Property="IsSelected" Value="True"/>
                                <Condition Property="IsMouseOver" Value="False"/>
                                <Condition Property="IsKeyboardFocused" Value="False"/>
                            </MultiTrigger.Conditions>
                            <Setter Property="Background" TargetName="Bd" Value="{StaticResource ComboBoxItem.ItemsviewSelectedNoFocus.Background}"/>
                            <Setter Property="Foreground"  Value="white"/>
                        </MultiTrigger>
                    </ControlTemplate.Triggers>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>


    <Style x:Key="CommonTextBox" TargetType="{x:Type TextBox}">
        <Setter Property="BorderBrush" Value="{StaticResource AyComboBox.Static.Border}">
        </Setter>
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type TextBox}">
                    <Border x:Name="border" BorderBrush="{TemplateBinding BorderBrush}" BorderThickness="{TemplateBinding BorderThickness}" Background="{TemplateBinding Background}" SnapsToDevicePixels="True">
                        <ScrollViewer x:Name="PART_ContentHost" Focusable="False" HorizontalScrollBarVisibility="Hidden" VerticalScrollBarVisibility="Hidden"/>
                    </Border>
                    <ControlTemplate.Triggers>
                        <Trigger Property="IsEnabled" Value="False">
                            <Setter Property="Opacity" TargetName="border" Value="0.5"/>
                        </Trigger>
                    </ControlTemplate.Triggers>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>
    <ControlTemplate x:Key="AyImageButton.HorizonFour" TargetType="{x:Type control:AyImageButton}">
        <Border x:Name="border" BorderBrush="{TemplateBinding BorderBrush}" BorderThickness="{TemplateBinding BorderThickness}" SnapsToDevicePixels="true" >
            <Border.Background>
                <ImageBrush ImageSource="{Binding Path=Icon, RelativeSource={RelativeSource TemplatedParent}}" Stretch="Uniform" Viewbox="0,0 0.25,1"/>
            </Border.Background>
            <ContentPresenter x:Name="contentPresenter" Focusable="False" HorizontalAlignment="{TemplateBinding HorizontalContentAlignment}" Margin="{TemplateBinding Padding}" RecognizesAccessKey="True" SnapsToDevicePixels="{TemplateBinding SnapsToDevicePixels}" VerticalAlignment="{TemplateBinding VerticalContentAlignment}"/>
        </Border>
        <ControlTemplate.Triggers>
            <Trigger Property="IsDefaulted" Value="true">
                <Setter Property="Background" TargetName="border">
                    <Setter.Value>
                        <ImageBrush ImageSource="{Binding Path=Icon, RelativeSource={RelativeSource TemplatedParent}}" Stretch="Uniform" Viewbox="0,0 0.25,1"/>
                    </Setter.Value>
                </Setter>
            </Trigger>
            <Trigger Property="IsMouseOver" Value="true">
                <Setter Property="Background" TargetName="border">
                    <Setter.Value>
                        <ImageBrush ImageSource="{Binding Path=Icon, RelativeSource={RelativeSource TemplatedParent}}" Stretch="Uniform" Viewbox="0.25,0 0.25,1"/>
                    </Setter.Value>
                </Setter>
            </Trigger>
            <Trigger Property="IsPressed" Value="true">
                <Setter Property="Background" TargetName="border">
                    <Setter.Value>
                        <ImageBrush ImageSource="{Binding Path=Icon, RelativeSource={RelativeSource TemplatedParent}}" Stretch="Uniform" Viewbox="0.5,0 0.25,1"/>
                    </Setter.Value>
                </Setter>
            </Trigger>
            <Trigger Property="IsEnabled" Value="false">
                <Setter Property="Background" TargetName="border">
                    <Setter.Value>
                        <ImageBrush ImageSource="{Binding Path=Icon, RelativeSource={RelativeSource TemplatedParent}}" Stretch="Uniform" Viewbox="0.75,0 0.25,1"/>
                    </Setter.Value>
                </Setter>
            </Trigger>
        </ControlTemplate.Triggers>
    </ControlTemplate>

    <ControlTemplate x:Key="AyImageButton.Manner" TargetType="{x:Type control:AyImageButton}">
        <Border x:Name="border" BorderBrush="{TemplateBinding BorderBrush}" BorderThickness="{TemplateBinding BorderThickness}" SnapsToDevicePixels="true" >
            <Grid>
                <Image x:Name="icon" Source="{Binding Path=Icon, RelativeSource={RelativeSource TemplatedParent}}" Stretch="Uniform"  VerticalAlignment="Center" HorizontalAlignment="Center"/>
                <Image x:Name="hicon" Visibility="Collapsed"  Source="{Binding Path=HoverIcon, RelativeSource={RelativeSource TemplatedParent}}" Stretch="Uniform"  VerticalAlignment="Center" HorizontalAlignment="Center"/>
                <Image x:Name="picon" Visibility="Collapsed" Source="{Binding Path=PressedIcon, RelativeSource={RelativeSource TemplatedParent}}" Stretch="Uniform"  VerticalAlignment="Center" HorizontalAlignment="Center"/>
                <Image x:Name="dicon" Visibility="Collapsed" Source="{Binding Path=DisabledIcon, RelativeSource={RelativeSource TemplatedParent}}" Stretch="Uniform"  VerticalAlignment="Center" HorizontalAlignment="Center"/>
                <ContentPresenter x:Name="contentPresenter" Focusable="False" HorizontalAlignment="{TemplateBinding HorizontalContentAlignment}" Margin="{TemplateBinding Padding}" RecognizesAccessKey="True" SnapsToDevicePixels="{TemplateBinding SnapsToDevicePixels}" VerticalAlignment="{TemplateBinding VerticalContentAlignment}"/>
            </Grid>
        </Border>
        <ControlTemplate.Triggers>
            <Trigger Property="IsMouseOver" Value="true">
                <Setter TargetName="icon" Property="Visibility" Value="Visible"/>
                <Setter TargetName="hicon" Property="Visibility" Value="Collapsed"/>
                <Setter TargetName="picon" Property="Visibility" Value="Collapsed"/>
                <Setter TargetName="dicon" Property="Visibility" Value="Collapsed"/>
            </Trigger>
            <Trigger Property="IsMouseOver" Value="true">
                <Setter TargetName="icon" Property="Visibility" Value="Collapsed"/>
                <Setter TargetName="hicon" Property="Visibility" Value="Visible"/>
                <Setter TargetName="picon" Property="Visibility" Value="Collapsed"/>
                <Setter TargetName="dicon" Property="Visibility" Value="Collapsed"/>
            </Trigger>
            <Trigger Property="IsPressed" Value="true">
                <Setter TargetName="icon" Property="Visibility" Value="Collapsed"/>
                <Setter TargetName="hicon" Property="Visibility" Value="Collapsed"/>
                <Setter TargetName="picon" Property="Visibility" Value="Visible"/>
                <Setter TargetName="dicon" Property="Visibility" Value="Collapsed"/>
            </Trigger>
            <Trigger Property="IsEnabled" Value="false">
                <Setter TargetName="icon" Property="Visibility" Value="Collapsed"/>
                <Setter TargetName="hicon" Property="Visibility" Value="Collapsed"/>
                <Setter TargetName="picon" Property="Visibility" Value="Collapsed"/>
                <Setter TargetName="dicon" Property="Visibility" Value="Visible"/>
            </Trigger>
        </ControlTemplate.Triggers>
    </ControlTemplate>
    <Style x:Key="{x:Type control:AyImageButton}"  TargetType="{x:Type control:AyImageButton}">
        <Setter Property="FocusVisualStyle" Value="{x:Null}"/>
        <Setter Property="BorderThickness" Value="0"/>
        <Setter Property="Background" Value="Red"/>
        <Setter Property="RenderOptions.BitmapScalingMode" Value="Fant"/>
        <Setter Property="UseLayoutRounding" Value="True"/>
        <Setter Property="Cursor" Value="Hand"/>
        <Setter Property="Template" Value="{StaticResource AyImageButton.Manner}"/>
        <Style.Triggers>
            <Trigger Property="RenderMode" Value="HorizonFour">
                <Setter Property="Template" Value="{StaticResource AyImageButton.HorizonFour}"/>
            </Trigger>
        </Style.Triggers>
    </Style>




    <Style x:Key="TabRightButtonStyle" TargetType="{x:Type Button}">
        <Setter Property="FocusVisualStyle" Value="{x:Null}"/>

        <Setter Property="BorderBrush" Value="#79C0BB"/>
        <Setter Property="Foreground" Value="#000"/>
        <Setter Property="BorderThickness" Value="1"/>
        <Setter Property="HorizontalContentAlignment" Value="Center"/>
        <Setter Property="VerticalContentAlignment" Value="Center"/>
        <Setter Property="Padding" Value="1"/>
        <Setter Property="Cursor" Value="Hand"/>
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type Button}">
                    <Border x:Name="border" CornerRadius="3" BorderBrush="{TemplateBinding BorderBrush}" BorderThickness="{TemplateBinding BorderThickness}" SnapsToDevicePixels="True">
                        <Border.Background>
                            <LinearGradientBrush EndPoint="0.5,1" StartPoint="0.5,0">
                                <GradientStop Color="{DynamicResource TabRightButtonStyle.static.color1}" Offset="0"/>
                                <GradientStop Color="{DynamicResource TabRightButtonStyle.static.color2}" Offset="1"/>
                            </LinearGradientBrush>
                        </Border.Background>
                        <VisualStateManager.VisualStateGroups>
                            <VisualStateGroup x:Name="CommonStates">
                                <VisualStateGroup.Transitions>
                                    <VisualTransition GeneratedDuration="0:0:0.2">
                                        <VisualTransition.GeneratedEasingFunction>
                                            <CircleEase EasingMode="EaseIn"/>
                                        </VisualTransition.GeneratedEasingFunction>
                                    </VisualTransition>
                                </VisualStateGroup.Transitions>
                                <VisualState x:Name="Normal"/>
                                <VisualState x:Name="MouseOver">
                                    <Storyboard>
                                        <ColorAnimationUsingKeyFrames Storyboard.TargetProperty="(Panel.Background).(GradientBrush.GradientStops)[0].(GradientStop.Color)" Storyboard.TargetName="border">
                                            <EasingColorKeyFrame KeyTime="0" Value="{StaticResource TabRightButtonStyle.hover.color1}"/>
                                        </ColorAnimationUsingKeyFrames>
                                        <ColorAnimationUsingKeyFrames Storyboard.TargetProperty="(Panel.Background).(GradientBrush.GradientStops)[1].(GradientStop.Color)" Storyboard.TargetName="border">
                                            <EasingColorKeyFrame KeyTime="0" Value="{StaticResource TabRightButtonStyle.hover.color2}"/>
                                        </ColorAnimationUsingKeyFrames>
                                    </Storyboard>
                                </VisualState>
                                <VisualState x:Name="Pressed">
                                    <Storyboard>
                                        <ColorAnimationUsingKeyFrames Storyboard.TargetProperty="(Panel.Background).(GradientBrush.GradientStops)[0].(GradientStop.Color)" Storyboard.TargetName="border">
                                            <EasingColorKeyFrame KeyTime="0" Value="{StaticResource TabRightButtonStyle.press.color1}"/>
                                        </ColorAnimationUsingKeyFrames>
                                        <ColorAnimationUsingKeyFrames Storyboard.TargetProperty="(Panel.Background).(GradientBrush.GradientStops)[1].(GradientStop.Color)" Storyboard.TargetName="border">
                                            <EasingColorKeyFrame KeyTime="0" Value="{StaticResource TabRightButtonStyle.press.color2}"/>
                                        </ColorAnimationUsingKeyFrames>
                                        <DoubleAnimationUsingKeyFrames Storyboard.TargetProperty="(UIElement.RenderTransform).(TransformGroup.Children)[3].(TranslateTransform.X)" Storyboard.TargetName="contentPresenter">
                                            <EasingDoubleKeyFrame KeyTime="0" Value="2"/>
                                        </DoubleAnimationUsingKeyFrames>
                                        <DoubleAnimationUsingKeyFrames Storyboard.TargetProperty="(UIElement.RenderTransform).(TransformGroup.Children)[3].(TranslateTransform.Y)" Storyboard.TargetName="contentPresenter">
                                            <EasingDoubleKeyFrame KeyTime="0" Value="1"/>
                                        </DoubleAnimationUsingKeyFrames>
                                    </Storyboard>
                                </VisualState>
                                <VisualState x:Name="Disabled"/>
                            </VisualStateGroup>
                        </VisualStateManager.VisualStateGroups>
                        <ContentPresenter x:Name="contentPresenter" ContentTemplate="{TemplateBinding ContentTemplate}" Content="{TemplateBinding Content}" ContentStringFormat="{TemplateBinding ContentStringFormat}" Focusable="False" HorizontalAlignment="{TemplateBinding HorizontalContentAlignment}" Margin="{TemplateBinding Padding}" RecognizesAccessKey="True" SnapsToDevicePixels="{TemplateBinding SnapsToDevicePixels}" VerticalAlignment="{TemplateBinding VerticalContentAlignment}" RenderTransformOrigin="0.5,0.5">
                            <ContentPresenter.RenderTransform>
                                <TransformGroup>
                                    <ScaleTransform/>
                                    <SkewTransform/>
                                    <RotateTransform/>
                                    <TranslateTransform/>
                                </TransformGroup>
                            </ContentPresenter.RenderTransform>
                        </ContentPresenter>
                    </Border>

                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>
    <Style x:Key="SelectButtonStyle" TargetType="{x:Type Button}">
        <Setter Property="FocusVisualStyle" Value="{x:Null}"/>
        <Setter Property="Background" Value="#FFDDDDDD"/>
        <Setter Property="BorderBrush" Value="#FF707070"/>
        <Setter Property="Foreground" Value="{DynamicResource {x:Static SystemColors.ControlTextBrushKey}}"/>
        <Setter Property="BorderThickness" Value="1"/>
        <Setter Property="HorizontalContentAlignment" Value="Center"/>
        <Setter Property="VerticalContentAlignment" Value="Center"/>
        <Setter Property="Padding" Value="1"/>
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type Button}">
                    <Border x:Name="border" BorderBrush="{TemplateBinding BorderBrush}" BorderThickness="{TemplateBinding BorderThickness}" Background="{TemplateBinding Background}" SnapsToDevicePixels="True">
                        <ContentPresenter x:Name="contentPresenter" ContentTemplate="{TemplateBinding ContentTemplate}" Content="{TemplateBinding Content}" ContentStringFormat="{TemplateBinding ContentStringFormat}" Focusable="False" HorizontalAlignment="{TemplateBinding HorizontalContentAlignment}" Margin="{TemplateBinding Padding}" RecognizesAccessKey="True" SnapsToDevicePixels="{TemplateBinding SnapsToDevicePixels}" VerticalAlignment="{TemplateBinding VerticalContentAlignment}"/>
                    </Border>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>





    <Style x:Key="AyGroupboxStyleNormal" TargetType="{x:Type GroupBox}">
        <Setter Property="BorderBrush" Value="#FFD5DFE5"/>
        <Setter Property="BorderThickness" Value="2"/>
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type GroupBox}">
                    <Grid SnapsToDevicePixels="True">
                        <Grid.ColumnDefinitions>
                            <ColumnDefinition Width="6"/>
                            <ColumnDefinition Width="Auto"/>
                            <ColumnDefinition Width="*"/>
                            <ColumnDefinition Width="6"/>
                        </Grid.ColumnDefinitions>
                        <Grid.RowDefinitions>
                            <RowDefinition Height="Auto"/>
                            <RowDefinition Height="Auto"/>
                            <RowDefinition Height="*"/>
                            <RowDefinition Height="6"/>
                        </Grid.RowDefinitions>
                        <Border BorderBrush="Transparent" BorderThickness="{TemplateBinding BorderThickness}" Background="{TemplateBinding Background}" Grid.ColumnSpan="4" 
                                                    Grid.Column="0" CornerRadius="4" Grid.Row="1" Grid.RowSpan="3"/>
                        <Border BorderBrush="White" BorderThickness="{TemplateBinding BorderThickness}" Grid.ColumnSpan="4" CornerRadius="4" Grid.Row="1" Grid.RowSpan="3">
                            <Border.OpacityMask>
                                <MultiBinding ConverterParameter="7" UpdateSourceTrigger="Default">
                                    <MultiBinding.Converter>
                                        <BorderGapMaskConverter/>
                                    </MultiBinding.Converter>
                                    <Binding ElementName="Header" Path="ActualWidth"/>
                                    <Binding Path="ActualWidth" RelativeSource="{RelativeSource Self}"/>
                                    <Binding Path="ActualHeight" RelativeSource="{RelativeSource Self}"/>
                                </MultiBinding>
                            </Border.OpacityMask>
                            <Border BorderBrush="{TemplateBinding BorderBrush}" BorderThickness="{TemplateBinding BorderThickness}" >
                                <Border BorderBrush="White" BorderThickness="{TemplateBinding BorderThickness}" CornerRadius="2"/>
                            </Border>
                        </Border>
                        <Border x:Name="Header" Grid.Column="1" Padding="8,1,8,0" Grid.Row="0" Grid.RowSpan="2">
                            <ContentPresenter ContentTemplate="{TemplateBinding HeaderTemplate}" Content="{TemplateBinding Header}" 
                                                  ContentStringFormat="{TemplateBinding HeaderStringFormat}" ContentSource="Header" 
                                                  RecognizesAccessKey="True" SnapsToDevicePixels="{TemplateBinding SnapsToDevicePixels}"/>
                        </Border>
                        <ContentPresenter Grid.ColumnSpan="2" ContentTemplate="{TemplateBinding ContentTemplate}" Content="{TemplateBinding Content}" Grid.Column="1" ContentStringFormat="{TemplateBinding ContentStringFormat}" Margin="{TemplateBinding Padding}" Grid.Row="2" SnapsToDevicePixels="{TemplateBinding SnapsToDevicePixels}"/>
                    </Grid>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>





    <SolidColorBrush x:Key="TabItemShadowColor" Color="#E5404040"/>

    <Style x:Key="AyTabControl" TargetType="{x:Type TabControl}">
        <Style.Resources>
            <Style TargetType="{x:Type TabItem}" BasedOn="{StaticResource {x:Type TabItem}}">
                <Setter Property="TextBlock.Foreground" Value="#000000" />
                <Setter Property="TextBlock.FontSize" Value="12" />
                <Setter Property="FocusVisualStyle" Value="{x:Null}"/>
                <Setter Property="SnapsToDevicePixels" Value="true"/>
                <Setter Property="Padding" Value="14,0,0,0"/>

                <Setter Property="Template">
                    <Setter.Value>
                        <ControlTemplate TargetType="{x:Type TabItem}">

                            <Grid Margin="{TemplateBinding Margin}">
                                <Border CornerRadius="0,0,0,0" x:Name="tabItemBorder" Height="28" Width="107"  >
                                    <Grid Cursor="Hand">
                                        <Path x:Name="newTabBorder" Data="M507.5,334.5 L485.25,312.25 C485.25,312.25 482,309.5 476.5,308.5 471,307.5 401.5,308.5 401.5,308.5 401.5,308.5 398.5,309.49957 398.5,311.99961 398.5,314.49965 398.5,334.375 398.5,334.375 z" 
                            			Stretch="Fill" Fill="{DynamicResource s.UnSelect.tab.Color}"/>
                                        <ContentPresenter x:Name="contentPresenter" 
                            			ContentSource="Header"
                            			Focusable="False" 
                            			HorizontalAlignment="Left" 
                            			Margin="{TemplateBinding Padding}" 
                            			RecognizesAccessKey="True" 
                            			SnapsToDevicePixels="{TemplateBinding SnapsToDevicePixels}" 
                            			VerticalAlignment="Center"/>
                                    </Grid>

                                </Border>

                            </Grid>



                            <ControlTemplate.Triggers>
                                <Trigger Property="IsSelected" Value="True">
                                    <Setter TargetName="newTabBorder" Property="Fill" Value="{DynamicResource s.main.top.logo.color2}" />
                                    <Setter Property="Foreground" Value="#ffffff" />
                                    <Setter  Property="Panel.ZIndex" Value="100" />
                                </Trigger>
                                <Trigger Property="IsSelected" Value="false">
                                    <Setter  Property="Panel.ZIndex" Value="-1" />
                                </Trigger>
                                <MultiTrigger>
                                    <MultiTrigger.Conditions>
                                        <Condition Property="IsSelected" Value="false"/>
                                        <Condition Property="IsMouseOver" Value="True"/>
                                    </MultiTrigger.Conditions>
                                    <Setter TargetName="tabItemBorder" Property="Background" Value="#B2FFFFFF" />
                                </MultiTrigger>

                                <Trigger Property="TabStripPlacement" Value="Left">
                                    <Setter Property="LayoutTransform">
                                        <Setter.Value>
                                            <RotateTransform Angle="-90" />
                                        </Setter.Value>
                                    </Setter>
                                </Trigger>

                                <Trigger Property="TabStripPlacement" Value="Right">
                                    <Setter Property="LayoutTransform">
                                        <Setter.Value>
                                            <RotateTransform Angle="90" />
                                        </Setter.Value>
                                    </Setter>
                                </Trigger>
                                <Trigger Property="TabStripPlacement" Value="Bottom">
                                    <Setter Property="LayoutTransform">
                                        <Setter.Value>
                                            <RotateTransform Angle="180" />
                                        </Setter.Value>
                                    </Setter>
                                </Trigger>
                            </ControlTemplate.Triggers>
                        </ControlTemplate>
                    </Setter.Value>
                </Setter>

            </Style>
        </Style.Resources>
        <Setter Property="Padding" Value="4"/>
        <Setter Property="HorizontalContentAlignment" Value="Center"/>
        <Setter Property="VerticalContentAlignment" Value="Center"/>
        <Setter Property="Background" Value="White"/>
        <Setter Property="BorderBrush" Value="{DynamicResource s.main.top.logo.color2}"/>
        <Setter Property="BorderThickness" Value="1"/>
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type TabControl}">


                    <Grid x:Name="templateRoot" ClipToBounds="True" SnapsToDevicePixels="True" KeyboardNavigation.TabNavigation="Local">
                        <Grid.ColumnDefinitions>
                            <ColumnDefinition x:Name="ColumnDefinition0"/>
                            <ColumnDefinition x:Name="ColumnDefinition1" Width="0"/>
                        </Grid.ColumnDefinitions>
                        <Grid.RowDefinitions>
                            <RowDefinition x:Name="RowDefinition0" Height="Auto"/>
                            <RowDefinition x:Name="RowDefinition1" Height="*"/>
                        </Grid.RowDefinitions>

                        <TabPanel x:Name="HeaderPanel" Background="Transparent" Grid.Column="0" IsItemsHost="True" Margin="0,0,0,0" Grid.Row="0" KeyboardNavigation.TabIndex="1" Panel.ZIndex="1"/>


                        <Border  Grid.Column="0" x:Name="ContentPanel"
        						Grid.Row="1" BorderBrush="{TemplateBinding BorderBrush}" 
        						BorderThickness="1,7,1,1" 
        						Background="{TemplateBinding Background}"  
        						KeyboardNavigation.DirectionalNavigation="Contained"  
        						KeyboardNavigation.TabIndex="2" KeyboardNavigation.TabNavigation="Local">

                            <ContentPresenter x:Name="PART_SelectedContentHost" ContentTemplate="{TemplateBinding SelectedContentTemplate}" Content="{TemplateBinding SelectedContent}" ContentStringFormat="{TemplateBinding SelectedContentStringFormat}" ContentSource="SelectedContent" Margin="{TemplateBinding Padding}" SnapsToDevicePixels="{TemplateBinding SnapsToDevicePixels}"/>
                        </Border>

                    </Grid>

                    <ControlTemplate.Triggers>

                        <Trigger Property="IsEnabled" Value="False">
                            <Setter Property="TextElement.Foreground" TargetName="templateRoot" Value="{DynamicResource {x:Static SystemColors.GrayTextBrushKey}}"/>
                        </Trigger>
                    </ControlTemplate.Triggers>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>

    <Style x:Key="{x:Type DataGridCell}" TargetType="{x:Type DataGridCell}">
        <Setter Property="FocusVisualStyle" Value="{x:Null}"/>
        <Setter Property="Background" Value="Transparent" />
        <Setter Property="BorderBrush" Value="Transparent" />
        <Setter Property="BorderThickness" Value="0" />
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type DataGridCell}">
                    <Border Background="{TemplateBinding Background}" 
                      BorderBrush="{TemplateBinding BorderBrush}"  
                      BorderThickness="{TemplateBinding BorderThickness}" 
                      SnapsToDevicePixels="True">
                        <ContentPresenter SnapsToDevicePixels="{TemplateBinding SnapsToDevicePixels}" VerticalAlignment="Center"/>
                    </Border>
                    <ControlTemplate.Triggers>
                        <Trigger Property="IsSelected" Value="True">
                            <Setter Property="Foreground" Value="#000000"/>
                        </Trigger>
                    </ControlTemplate.Triggers>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>
    <Style x:Key="AyDataGridRowStyle" TargetType="{x:Type DataGridRow}">
        <Setter Property="SnapsToDevicePixels" Value="True"/>
        <Setter Property="IsSelected" Value="{Binding Selected}"></Setter>
        <Setter Property="Validation.ErrorTemplate" Value="{x:Null}"/>
        <Setter Property="ValidationErrorTemplate">
            <Setter.Value>
                <ControlTemplate>
                    <TextBlock Foreground="Red" Margin="2,0,0,0" Text="!" VerticalAlignment="Center"><Run Text="!"/></TextBlock>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type DataGridRow}">
                    <Border x:Name="DGR_Border" BorderBrush="{TemplateBinding BorderBrush}" BorderThickness="{TemplateBinding BorderThickness}" Background="#FFFFFF" SnapsToDevicePixels="True">
                        <SelectiveScrollingGrid>
                            <SelectiveScrollingGrid.ColumnDefinitions>
                                <ColumnDefinition Width="Auto"/>
                                <ColumnDefinition Width="*"/>
                            </SelectiveScrollingGrid.ColumnDefinitions>
                            <SelectiveScrollingGrid.RowDefinitions>
                                <RowDefinition Height="*"/>
                                <RowDefinition Height="Auto"/>
                            </SelectiveScrollingGrid.RowDefinitions>
                            <DataGridCellsPresenter Grid.Column="1" ItemsPanel="{TemplateBinding ItemsPanel}" SnapsToDevicePixels="{TemplateBinding SnapsToDevicePixels}"/>
                            <DataGridDetailsPresenter Grid.Column="1" Grid.Row="1" Visibility="{TemplateBinding DetailsVisibility}">
                                <SelectiveScrollingGrid.SelectiveScrollingOrientation>
                                    <Binding Path="AreRowDetailsFrozen" RelativeSource="{RelativeSource FindAncestor, AncestorLevel=1, AncestorType={x:Type DataGrid}}">
                                        <Binding.ConverterParameter>
                                            <SelectiveScrollingOrientation>Vertical</SelectiveScrollingOrientation>
                                        </Binding.ConverterParameter>
                                    </Binding>
                                </SelectiveScrollingGrid.SelectiveScrollingOrientation>
                            </DataGridDetailsPresenter>
                            <!--<DataGridRowHeader Grid.RowSpan="2" SelectiveScrollingGrid.SelectiveScrollingOrientation="Vertical">
                                    <DataGridRowHeader.Visibility>
                                        <Binding Path="HeadersVisibility" RelativeSource="{RelativeSource FindAncestor, AncestorLevel=1, AncestorType={x:Type DataGrid}}">
                                            <Binding.ConverterParameter>
                                                <DataGridHeadersVisibility>Row</DataGridHeadersVisibility>
                                            </Binding.ConverterParameter>
                                        </Binding>
                                    </DataGridRowHeader.Visibility>
                                </DataGridRowHeader>-->
                        </SelectiveScrollingGrid>
                    </Border>
                    <ControlTemplate.Triggers>
                        <Trigger Property="IsSelected" Value="True">
                            <Setter Property="Background" TargetName="DGR_Border" Value="{StaticResource s.AyDataGrid.Rows.Selected.Background.Color}" />
                            <Setter Property="Foreground" Value="#000000"/>
                            <Setter Property="BorderBrush" TargetName="DGR_Border" Value="{StaticResource s.AyDataGrid.Rows.Selected.Background.Color}" />
                        </Trigger>
                        <Trigger Property="IsMouseOver" Value="True">

                            <Setter Property="Background" TargetName="DGR_Border" Value="{StaticResource s.AyDataGrid.Rows.Hover.Background.Color}"/>
                        </Trigger>
                    </ControlTemplate.Triggers>
                </ControlTemplate>
            </Setter.Value>
        </Setter>

    </Style>

    <Style x:Key="{x:Type DataGrid}" TargetType="{x:Type DataGrid}">
        <Setter Property="RenderOptions.BitmapScalingMode" Value="Fant"/>
        <Setter Property="VerticalGridLinesBrush" Value="{StaticResource s.AyDataGrid.Cells.Border.Color}"></Setter>
        <Setter Property="HorizontalGridLinesBrush" Value="{StaticResource s.AyDataGrid.Cells.Border.Color}"></Setter>
        <Setter Property="CanUserReorderColumns" Value="False"></Setter>
        <Setter Property="AlternatingRowBackground" Value="{StaticResource s.AyDataGrid.AlterRow.Background.Color}"></Setter>
        <Setter Property="CanUserAddRows" Value="False"></Setter>
        <Setter Property="CanUserDeleteRows" Value="False"></Setter>
        <Setter Property="CanUserResizeColumns" Value="False"></Setter>
        <Setter Property="CanUserResizeRows" Value="False"></Setter>
        <Setter Property="BorderBrush" Value="{StaticResource s.AyDataGrid.Cells.Border.Color}"></Setter>
        <Setter Property="BorderThickness" Value="0"></Setter>
        <Setter Property="AutoGenerateColumns" Value="False"></Setter>
        <Setter Property="IsReadOnly" Value="true"></Setter>
        <Setter Property="RowHeight" Value="28"></Setter>
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type DataGrid}">
                    <Border BorderBrush="{TemplateBinding BorderBrush}" BorderThickness="{TemplateBinding BorderThickness}" Background="{TemplateBinding Background}" Padding="{TemplateBinding Padding}" SnapsToDevicePixels="True">
                        <ScrollViewer x:Name="DG_ScrollViewer" Focusable="False">
                            <ScrollViewer.Template>
                                <ControlTemplate TargetType="{x:Type ScrollViewer}">
                                    <!--<Grid>
                                            <Grid.ColumnDefinitions>
                                                <ColumnDefinition Width="Auto"/>
                                                <ColumnDefinition Width="*"/>
                                                <ColumnDefinition Width="Auto"/>
                                            </Grid.ColumnDefinitions>
                                            <Grid.RowDefinitions>
                                                <RowDefinition Height="Auto"/>
                                                <RowDefinition Height="*"/>
                                                <RowDefinition Height="Auto"/>
                                            </Grid.RowDefinitions>-->
                                    <Grid Background="{TemplateBinding Background}" SnapsToDevicePixels="true">
                                        <Grid.ColumnDefinitions>
                                            <ColumnDefinition Width="*" />
                                            <ColumnDefinition Width="Auto"/>
                                        </Grid.ColumnDefinitions>
                                        <Grid.RowDefinitions>
                                            <RowDefinition Height="Auto"/>
                                            <RowDefinition Height="*"/>
                                            <RowDefinition Height="Auto"/>
                                        </Grid.RowDefinitions>
                                        <Border  Margin="{TemplateBinding Padding}" Grid.ColumnSpan="2" BorderThickness="0,0,0,1" 
                                                     >
                                            <ScrollViewer  Focusable="false" HorizontalScrollBarVisibility="Hidden" VerticalScrollBarVisibility="Hidden">
                                                <DataGridColumnHeadersPresenter x:Name="PART_ColumnHeadersPresenter">
                                                    <DataGridColumnHeadersPresenter.Visibility>
                                                        <Binding Path="HeadersVisibility" RelativeSource="{RelativeSource FindAncestor, AncestorLevel=1, AncestorType={x:Type DataGrid}}">
                                                            <Binding.ConverterParameter>
                                                                <DataGridHeadersVisibility>Column</DataGridHeadersVisibility>
                                                            </Binding.ConverterParameter>
                                                        </Binding>
                                                    </DataGridColumnHeadersPresenter.Visibility>
                                                </DataGridColumnHeadersPresenter>
                                            </ScrollViewer>
                                        </Border>
                                        <ScrollContentPresenter x:Name="PART_ScrollContentPresenter" CanContentScroll="{TemplateBinding CanContentScroll}"
                                                                    CanHorizontallyScroll="False" Grid.ColumnSpan="2" CanVerticallyScroll="False" 
                                                                    ContentTemplate="{TemplateBinding ContentTemplate}" 
                                                                    Content="{TemplateBinding Content}" ContentStringFormat="{TemplateBinding ContentStringFormat}" Grid.Row="1" />

                                        <ScrollBar x:Name="PART_VerticalScrollBar" Grid.RowSpan="2"  AutomationProperties.AutomationId="VerticalScrollBar" Cursor="Arrow" Grid.Column="1"
                                               Grid.Row="1" Maximum="{TemplateBinding ScrollableHeight}" Minimum="0" Visibility="{TemplateBinding ComputedVerticalScrollBarVisibility}" Value="{Binding VerticalOffset, Mode=OneWay, RelativeSource={RelativeSource TemplatedParent}}" ViewportSize="{TemplateBinding ViewportHeight}" Style="{DynamicResource AyScrollBarStyle}"/>


                                        <Grid  Grid.Column="0" Grid.Row="2">
                                            <Grid.ColumnDefinitions>
                                                <ColumnDefinition Width="{Binding NonFrozenColumnsViewportHorizontalOffset, RelativeSource={RelativeSource FindAncestor, AncestorLevel=1, AncestorType={x:Type DataGrid}}}"/>
                                                <ColumnDefinition Width="*"/>
                                            </Grid.ColumnDefinitions>
                                            <ScrollBar x:Name="PART_HorizontalScrollBar"   AutomationProperties.AutomationId="HorizontalScrollBar" Cursor="Arrow"
                                               Maximum="{TemplateBinding ScrollableWidth}" Minimum="0" Orientation="Horizontal" 
                                               Visibility="{TemplateBinding ComputedHorizontalScrollBarVisibility}" 
                                               Value="{Binding HorizontalOffset, Mode=OneWay, RelativeSource={RelativeSource TemplatedParent}}"
                                               ViewportSize="{TemplateBinding ViewportWidth}" Style="{DynamicResource AyScrollBarStyle}"/>
                                        </Grid>

                                    </Grid>
                                </ControlTemplate>
                            </ScrollViewer.Template>
                            <ItemsPresenter SnapsToDevicePixels="{TemplateBinding SnapsToDevicePixels}"/>
                        </ScrollViewer>
                    </Border>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
        <Setter Property="ColumnHeaderStyle">
            <Setter.Value>
                <Style TargetType="{x:Type DataGridColumnHeader}">
                    <Setter Property="VerticalContentAlignment" Value="Center"/>
                    <Setter Property="HorizontalContentAlignment" Value="Left"></Setter>
                    <Setter Property="Background" Value="#E3EFEC"/>
                    <Setter Property="Foreground" Value="#000"/>
                    <Setter Property="BorderBrush" Value="{StaticResource s.AyDataGrid.Cells.Border.Color}"/>
                    <Setter Property="BorderThickness" Value="0,0,1,0"/>
                    <Setter Property="Height" Value="28"/>
                    <Setter Property="Padding" Value="2,0,0,0"/>
                </Style>
            </Setter.Value>
        </Setter>
        <Setter Property="RowStyle" Value="{StaticResource AyDataGridRowStyle}"></Setter>
    </Style>


    <!--END-->
    <Style TargetType="{x:Type control:AyTextBox}"  BasedOn="{StaticResource {x:Type TextBox}}">
        <Setter Property="Margin" Value="0"/>

        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type control:AyTextBox}">
                    <ControlTemplate.Resources>
                        <!--<Storyboard x:Key="enterGotFocus" >
                            <DoubleAnimation Duration="0:0:0.2" To=".33" Storyboard.TargetProperty="Opacity" Storyboard.TargetName="Message"/>
                        </Storyboard>
                        <Storyboard x:Key="exitGotFocus" >
                            <DoubleAnimation Duration="0:0:0.4" Storyboard.TargetProperty="Opacity" Storyboard.TargetName="Message"/>
                        </Storyboard>-->
                        <Storyboard x:Key="enterHasText" >
                            <DoubleAnimation Duration="0:0:0.2" From=".33" To="0" Storyboard.TargetProperty="Opacity" Storyboard.TargetName="Message"/>
                        </Storyboard>
                        <Storyboard x:Key="exitHasText" >
                            <DoubleAnimation Duration="0:0:0.4" Storyboard.TargetProperty="Opacity" Storyboard.TargetName="Message"/>
                        </Storyboard>
                    </ControlTemplate.Resources>

                    <Border  Name="Bd"     Background="{Binding Path=Background, RelativeSource={RelativeSource TemplatedParent}, Mode=OneWay}" 
                        BorderThickness="{Binding Path=BorderThickness, RelativeSource={RelativeSource TemplatedParent}, Mode=OneWay}"
                            Padding="{Binding Path=Padding, RelativeSource={RelativeSource TemplatedParent}, Mode=OneWay}"
                             >
                        <Border.BorderBrush>
                            <SolidColorBrush Color="#FFFFFF"/>
                        </Border.BorderBrush>
                        <Grid>
                            <Grid.ColumnDefinitions>
                                <ColumnDefinition Width="*"/>
                                <ColumnDefinition Width="Auto"/>
                            </Grid.ColumnDefinitions>
                            <ScrollViewer x:Name="PART_ContentHost" VerticalAlignment="Center" Margin="3" Grid.Column="0"/>
                            <TextBlock Text="{TemplateBinding Mask}" x:Name="Message" Grid.Column="0" Foreground="{TemplateBinding MaskForeground}" IsHitTestVisible="False" Opacity="0.67" HorizontalAlignment="Left" VerticalAlignment="Center" Margin="6,0,0,0"/>
                            <ContentPresenter x:Name="rightcp" Grid.Column="1" Content="{TemplateBinding RightContent}"/>
                        </Grid>
                    </Border>
                    <ControlTemplate.Triggers>
                        <!-- <MultiTrigger>
                            <MultiTrigger.Conditions>
                                <Condition Property="HasText" Value="False"/>
                                <Condition Property="IsFocused" Value="True"/>
                            </MultiTrigger.Conditions>
                          
                            --><!--<MultiTrigger.EnterActions>
                                <BeginStoryboard Storyboard="{StaticResource enterGotFocus}"/>
                            </MultiTrigger.EnterActions>
                            <MultiTrigger.ExitActions>
                                <BeginStoryboard Storyboard="{StaticResource exitGotFocus}"/>
                            </MultiTrigger.ExitActions>--><!--
                        </MultiTrigger>-->
                        <Trigger Property="HasText" Value="True">
                            <!--<Trigger.EnterActions>
                                <BeginStoryboard Storyboard="{StaticResource enterHasText}"/>
                            </Trigger.EnterActions>
                            <Trigger.ExitActions>
                                <BeginStoryboard Storyboard="{StaticResource exitHasText}"/>
                            </Trigger.ExitActions>-->

                            <Setter Property="Opacity" Value="0" TargetName="Message"></Setter>
                        </Trigger>

                        <Trigger Property="IsEnabled" Value="False">
                            <Setter Property="Opacity"  Value="0.5"/>
                        </Trigger>

                        <!--<Trigger Property="IsMouseOver" Value="True">
                            <Setter Property="BorderBrush" TargetName="Bd">
                                <Setter.Value>
                                    <SolidColorBrush Color="{DynamicResource AyInstallHoverButtonBorderColor}"/>
                                </Setter.Value>
                            </Setter>
                        </Trigger>
                        <Trigger Property="IsKeyboardFocused" Value="True">
                            <Setter Property="BorderBrush"  TargetName="Bd">
                                <Setter.Value>
                                    <SolidColorBrush Color="{DynamicResource AyInstallHoverButtonBorderColor}"/>
                                </Setter.Value>
                            </Setter>
                        </Trigger>-->
                        <Trigger Property="Width" Value="Auto">
                            <Setter Property="MinWidth" Value="100"/>
                        </Trigger>
                        <Trigger Property="Height" Value="Auto">
                            <Setter Property="MinHeight" Value="20"/>
                        </Trigger>
                    </ControlTemplate.Triggers>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>
    
</ResourceDictionary>